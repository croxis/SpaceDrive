#pragma once

#pragma include "Includes/Configuration.include"

// FROM:
// http://devlog-martinsh.blogspot.de/2013/05/image-imperfections-and-film-grain-post.html

/*
Film Grain post-process shader v1.1 
Martins Upitis (martinsh) devlog-martinsh.blogspot.com
2013

--------------------------
This work is licensed under a Creative Commons Attribution 3.0 Unported License.
So you are free to share, modify and adapt it for your needs, and even use it for commercial use.
I would also love to hear about a project you are using it.

Have fun,
Martins
--------------------------

Perlin noise shader by toneburst:
http://machinesdontcare.wordpress.com/2009/06/25/3d-perlin-noise-sphere-vertex-shader-sourcecode/
*/


const float permTexUnit = 1.0/256.0;        // Perm texture texel-size
const float permTexUnitHalf = 0.5/256.0;    // Half perm texture texel-size


const float grainamount = 0.01; //grain amount
bool colored = false; //colored noise?
float coloramount = 0.6;
float grainsize = 1.7; //grain particle size (1.5 - 2.5)
float lumamount = 1.0; //
    
//a random texture generator, but you can also use a pre-computed perturbation texture
vec4 filmGrain_rnm(vec2 tc, float timeOffset) 
{
    float noise =  sin(dot(tc + vec2(timeOffset,timeOffset),vec2(12.9898,78.233))) * 43758.5453;
    float noiseR =  fract(noise)*2.0-1.0;
    float noiseG =  fract(noise*1.2154)*2.0-1.0; 
    float noiseB =  fract(noise*1.3453)*2.0-1.0;
    float noiseA =  fract(noise*1.3647)*2.0-1.0;
    return vec4(noiseR,noiseG,noiseB,noiseA);
}

float filmGrain_fade(float t) {
    return t*t*t*(t*(t*6.0-15.0)+10.0);
}

float filmGrain_pnoise3D(vec3 p, float timeOffset)
{
    vec3 pi = permTexUnit*floor(p)+permTexUnitHalf; // Integer part, scaled so +1 moves permTexUnit texel
    // and offset 1/2 texel to sample texel centers
    vec3 pf = fract(p);     // Fractional part for interpolation

    // Noise contributions from (x=0, y=0), z=0 and z=1
    float perm00 = filmGrain_rnm(pi.xy, timeOffset).a ;
    vec3  grad000 = filmGrain_rnm(vec2(perm00, pi.z), timeOffset).rgb * 4.0 - 1.0;
    float n000 = dot(grad000, pf);
    vec3  grad001 = filmGrain_rnm(vec2(perm00, pi.z + permTexUnit), timeOffset).rgb * 4.0 - 1.0;
    float n001 = dot(grad001, pf - vec3(0.0, 0.0, 1.0));

    // Noise contributions from (x=0, y=1), z=0 and z=1
    float perm01 = filmGrain_rnm(pi.xy + vec2(0.0, permTexUnit), timeOffset).a ;
    vec3  grad010 = filmGrain_rnm(vec2(perm01, pi.z), timeOffset).rgb * 4.0 - 1.0;
    float n010 = dot(grad010, pf - vec3(0.0, 1.0, 0.0));
    vec3  grad011 = filmGrain_rnm(vec2(perm01, pi.z + permTexUnit), timeOffset).rgb * 4.0 - 1.0;
    float n011 = dot(grad011, pf - vec3(0.0, 1.0, 1.0));

    // Noise contributions from (x=1, y=0), z=0 and z=1
    float perm10 = filmGrain_rnm(pi.xy + vec2(permTexUnit, 0.0), timeOffset).a ;
    vec3  grad100 = filmGrain_rnm(vec2(perm10, pi.z), timeOffset).rgb * 4.0 - 1.0;
    float n100 = dot(grad100, pf - vec3(1.0, 0.0, 0.0));
    vec3  grad101 = filmGrain_rnm(vec2(perm10, pi.z + permTexUnit), timeOffset).rgb * 4.0 - 1.0;
    float n101 = dot(grad101, pf - vec3(1.0, 0.0, 1.0));

    // Noise contributions from (x=1, y=1), z=0 and z=1
    float perm11 = filmGrain_rnm(pi.xy + vec2(permTexUnit, permTexUnit), timeOffset).a ;
    vec3  grad110 = filmGrain_rnm(vec2(perm11, pi.z), timeOffset).rgb * 4.0 - 1.0;
    float n110 = dot(grad110, pf - vec3(1.0, 1.0, 0.0));
    vec3  grad111 = filmGrain_rnm(vec2(perm11, pi.z + permTexUnit), timeOffset).rgb * 4.0 - 1.0;
    float n111 = dot(grad111, pf - vec3(1.0, 1.0, 1.0));

    // Blend contributions along x
    vec4 n_x = mix(vec4(n000, n001, n010, n011), vec4(n100, n101, n110, n111), filmGrain_fade(pf.x));

    // Blend contributions along y
    vec2 n_xy = mix(n_x.xy, n_x.zw, filmGrain_fade(pf.y));

    // Blend contributions along z
    float n_xyz = mix(n_xy.x, n_xy.y, filmGrain_fade(pf.z));

    // We're done, return the final noise value.
    return n_xyz;
}

//2d coordinate orientation thing
vec2 filmGrain_coordRot(vec2 tc, float angle)
{
    float aspect = WINDOW_WIDTH/WINDOW_HEIGHT;
    float rotX = ((tc.x*2.0-1.0)*aspect*cos(angle)) - ((tc.y*2.0-1.0)*sin(angle));
    float rotY = ((tc.y*2.0-1.0)*cos(angle)) + ((tc.x*2.0-1.0)*aspect*sin(angle));
    rotX = ((rotX/aspect)*0.5+0.5);
    rotY = rotY*0.5+0.5;
    return vec2(rotX,rotY);
}

vec3 computeGrain(vec3 pixelColor, vec2 texCoord, float timeOffset) {
    
    vec3 rotOffset = vec3(1.425,3.892,5.835); //rotation offset values  
    vec2 rotCoordsR = filmGrain_coordRot(texCoord, timeOffset + rotOffset.x);
    vec3 noise = vec3(filmGrain_pnoise3D(vec3(rotCoordsR*vec2(WINDOW_WIDTH/grainsize,WINDOW_HEIGHT/grainsize),0.0), timeOffset));
  
    if (colored)
    {
        vec2 rotCoordsG = filmGrain_coordRot(texCoord, timeOffset + rotOffset.y);
        vec2 rotCoordsB = filmGrain_coordRot(texCoord, timeOffset + rotOffset.z);
        noise.g = mix(noise.r,filmGrain_pnoise3D(vec3(rotCoordsG*vec2(WINDOW_WIDTH/grainsize,WINDOW_HEIGHT/grainsize),1.0), timeOffset),coloramount);
        noise.b = mix(noise.r,filmGrain_pnoise3D(vec3(rotCoordsB*vec2(WINDOW_WIDTH/grainsize,WINDOW_HEIGHT/grainsize),2.0), timeOffset),coloramount);
    }


    //noisiness response curve based on scene luminance
    vec3 lumcoeff = vec3(0.299,0.587,0.114);
    float luminance = mix(0.0,dot(pixelColor, lumcoeff),lumamount);
    float lum = smoothstep(0.2,0.0,luminance);
    lum += luminance;
    
    
    noise = mix(noise,vec3(0.0),pow(lum,4.0));
    pixelColor = pixelColor+noise*grainamount;
   
    return pixelColor;
}