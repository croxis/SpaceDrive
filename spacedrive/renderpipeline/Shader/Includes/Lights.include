#pragma once

#pragma include "Includes/Configuration.include"
#pragma include "Includes/IESProfiles.include"
#pragma include "Includes/Lighting.include"


#if !defined(UNSHADOWED_PASS)
    #pragma include "Includes/Shadows.include"

    uniform samplerCube directionToFace;
#endif



vec3 applyPointLight(Light light, Material material, bool useShadows) {

    float distanceToLight = distance(material.position, light.position);   
    float distanceRelative = distanceToLight / light.radius; 
    float attenuation = computePointLightAttenuation(light, distanceToLight);

    vec3  l = normalize(light.position - material.position);
    vec3  v = normalize(cameraPosition - material.position);
    vec3  n = normalize(material.normal);
    vec3  h = normalize(l + v);
    float shadowFactor = 1.0;


    #if !defined(UNSHADOWED_PASS)
    if (useShadows) {
        // We decide which shadow map to sample using a simple lookup cubemap
        int faceIndex = int( textureLod(directionToFace, l, 0).r * 5.0);        
        int shadowSourceIndex = light.sourceIndexes[faceIndex];
        ShadowSource currentSource = shadowSources[shadowSourceIndex]; 
        shadowFactor = computeShadowsForSource(currentSource, material, n, l, 0.2, 0.001, 0.0015);
    }
    #endif

    return computeLightModel(light, material, l,v, n, h, attenuation, shadowFactor);
}


vec3 applyDirectionalLight(Light light, Material material, bool useShadows) {

    float distanceToLight = distance(material.position, light.position);   
    float distanceRelative = distanceToLight / light.radius; 
    float attenuation = 1.0;

    vec3  l = light.direction;
    vec3  v = normalize(cameraPosition - material.position);
    vec3  n = normalize(material.normal);
    vec3  h = normalize(l + v);
    float shadowFactor = 1.0;

    #if !defined(UNSHADOWED_PASS)
    if (useShadows) {
        int map_used = 0;
        shadowFactor = computePSSMShadowsForLight(light, material.position, n, l, 20.0, 20.0, 0.01, map_used);

        #if defined(DEBUG_RM_PSSM_SPLITS)
            // float factor = float(map_used) / DIRECTIONAL_LIGHT_SPLIT_COUNTS;
            // return vec3(factor, 1.0 - factor, 0);


        vec3 splitColor = vec3(0);

        if (map_used == -1)  splitColor = vec3(0.2);
        if (map_used == 0)  splitColor = vec3(1,0,0);
        if (map_used == 1)  splitColor = vec3(0,1,0);
        if (map_used == 2)  splitColor = vec3(0,0,1);
        if (map_used == 3)  splitColor = vec3(1,0,1);
        if (map_used == 4)  splitColor = vec3(0,1,1);
        if (map_used == 5)  splitColor = vec3(1,1,0);


        return splitColor * (0.05 + shadowFactor);

        #endif

    }

    #endif

    return computeLightModel(light, material, l, v, n, h, attenuation, shadowFactor);
}


vec3 applySpotLight(Light light, Material material, bool useShadows) {

    float distanceToLight = distance(material.position, light.position);   
    float distanceRelative = distanceToLight / light.radius; 

    vec3  l = normalize(light.position - material.position);
    vec3  v = normalize(cameraPosition - material.position);
    vec3  n = normalize(material.normal);
    vec3  h = normalize(l + v);

    vec4 transformedPoint = light.mvp * vec4(material.position, 1);
    vec3 transformedCoord = (transformedPoint.xyz / transformedPoint.w) * 0.5 + 0.5;

    float visibilityFactor = 0.0;

    if (transformedCoord.x > 0.01 && transformedCoord.y > 0.01 && transformedCoord.x < 0.99 && 
        transformedCoord.y < 0.99 && transformedPoint.w > 0.0) {
        visibilityFactor = 1.0;
    }

    float shadowFactor = 1.0;

    #if !defined(UNSHADOWED_PASS)
    if (useShadows) {
        int shadowSourceIndex = light.sourceIndexes[0];
        ShadowSource currentSource = shadowSources[shadowSourceIndex]; 
        shadowFactor = computeShadowsForSource(currentSource, material, n, l, 0.2, 0.01, 0.0003);
    }
    #endif

    float radialFactor = saturate(distance(transformedCoord.xy, vec2(0.5)) * 2.0);
    float attenuation = 1.0 - radialFactor;
    vec3 iesColor = computeIESProfile(light.iesProfile, radialFactor, distanceRelative);
    return computeLightModel(light,material, l,v, n, h, attenuation, shadowFactor) * visibilityFactor * iesColor;
}

