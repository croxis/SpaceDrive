#pragma once

#pragma include "Includes/Configuration.include"
#pragma include "Includes/Structures/Material.struct"


uniform samplerCube fallbackCubemap;
uniform float fallbackCubemapMipmaps;

vec3 transformCubemapCoordinates(vec3 coord) {
    return normalize(coord.xzy * vec3(1,-1,1));
}



float computeMipmapFromRoughness(float roughness) {
    // return max(0.0, fallbackCubemapMipmaps + (log((roughness+0.21)/log(20))+0.52)*3.7);
    return max(0.0, fallbackCubemapMipmaps - 16 +  pow(roughness, 0.25) * 15.0);

    // return fallbackCubemapMipmaps - roughness * 11.0;
}

vec3 filterEnvironmentMap(samplerCube tex, Material material, vec3 direction) {

    float mipmap = computeMipmapFromRoughness(material.roughness);
    float mipSize = pow(2.0, fallbackCubemapMipmaps - mipmap);
    float blurRadius = 1.0 / mipSize;

    float antialiasingFactor = saturate(length(dFdx(direction)) + length(dFdy(direction)));
    // mipmap += antialiasingFactor * CUBEMAP_ANTIALIASING_FACTOR;

    return textureLod(tex, direction, mipmap).xyz;
}



vec3 computeAmbient(Material material, vec4 giAmbient, vec4 giSpecular, float occlusionFactor, vec3 v) {



    #if defined(DEBUG_DISABLE_AMBIENT) || defined(DEBUG_RM_PSSM_SPLITS) || defined(DEBUG_RM_SHADOWS)
        return vec3(0.0);
    #endif


    #if defined(DEBUG_RM_GI_AMBIENT)
        return giAmbient.xyz;
    #endif




    float NxV = max(0.0, dot(material.normal, v)) + 1e-5;
    float borderFactor = saturate( pow(saturate(1.0 - NxV), 5.0));
    // borderFactor = 1.0;


    vec3 reflectedDir = transformCubemapCoordinates(reflect( -v, material.normal ));
    vec3 ambientDir = transformCubemapCoordinates(material.normal);
    vec3 ambientRefColor = filterEnvironmentMap(fallbackCubemap, material, reflectedDir);
    vec3 ambientDirColor = filterEnvironmentMap(fallbackCubemap, material, ambientDir);

    vec3 result = vec3(0);

    occlusionFactor = pow(occlusionFactor, 3.0);
    // occlusionFactor = pow(saturate(occlusionFactor - 0.4), 1.5) * 3.0;

    #if defined(USE_GLOBAL_ILLUMINATION)
        // occlusionFactor = 0.5 + giAmbient.w * 0.5;
    #endif


    result += 
                giAmbient.xyz *                             // Global Illumination 
                occlusionFactor *                           // Ambient Occlusion
                material.baseColor *                        // Tint by material color
                saturate(1.0 - material.metallic) *         // No diffuse ambient for metallic objects
                saturate(1.0 + giAmbient.w) *               // Global Illumination Occlusion
                1.0 * vec3(1.0,1.05,1.1) *                 // Color tint
                (0.5 + ambientDirColor * 1.0)               // Diffuse reflections
    ;


    ambientRefColor = pow(ambientRefColor, vec3(2.0));


    vec3 metallicSpecularAmbient = mix(ambientRefColor, vec3(1), 0.0) * mix(occlusionFactor, 1.0, 0.0) * material.specular * material.baseColor * 0.5;
    // metallicSpecularAmbient = ambientRefColor * material.specular * 0.5;

    // Make metallic materials brighter at the border
    metallicSpecularAmbient += borderFactor * vec3(0.2);

    result += metallicSpecularAmbient * material.metallic;

    // Take ambient factor into account
    result *= GLOBAL_AMBIENT_FACTOR;

    // result = ambientRefColor;


    return result;
}