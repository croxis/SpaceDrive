#pragma once

#pragma include "Includes/Configuration.include"
#pragma include "Includes/TransparentMaterial.include"


// Transparency bufers
layout (r32ui) coherent uniform uimage2D pixelCountBuffer;
layout (r32ui) coherent uniform uimage2D listHeadBuffer;
layout (r32i) coherent uniform iimage2D spinLockBuffer;
layout (rgba32ui) coherent uniform uimageBuffer materialDataBuffer;


void renderTransparentMaterial(TransparentMaterial tm) {

    #if !defined(DEBUG_DISABLE_TRANSPARENCY)

    // Discard fragments which are out of the transparency range
    if (tm.depth > 1.0) discard;

    ivec2 coord = ivec2(gl_FragCoord.xy);

    // Normalize material properties
    tm.texcoord = gl_FragCoord.xy / vec2(WINDOW_WIDTH, WINDOW_HEIGHT);
    tm.color = saturate(tm.color);
    tm.alpha = saturate(tm.alpha);
    tm.nextEntry = 0u;
    tm.normal = normalize(tm.normal);
    tm.depth = saturate(gl_FragCoord.z);    
    tm.roughness = saturate(tm.roughness);
    tm.specular = saturate(tm.specular);
    tm.metallic = saturate(tm.metallic);

    // Spinlock while editing the linked list
    bool done = false;

    uint locked = 0;
    int max_iter = 12;

    // Allocate buffer position
    uint position = imageAtomicAdd(pixelCountBuffer, ivec2(0, 0), 1) + 1;

    // Store material
    while(!done && max_iter --> 0)
    {
        locked = imageAtomicExchange(spinLockBuffer, coord, 1);
        if (locked == 0)
        {

            // Insert the material to the per pixel list by basically doing
            // list.insert(0, entry), as this is faster than list.append(entry)

            // Fetch the current list head
            uint listHead = imageLoad(listHeadBuffer, coord).x;
            
            // Replace the list head
            imageStore(listHeadBuffer, coord, uvec4(position) );

            // When we are the first fragment (so there is no fragment linked to
            // the pixel yet) we don't have any next entry
            if (listHead == 0u) {
                tm.nextEntry = 0u;

            // When there are further entries, our next entry is the old list head
            } else {
                tm.nextEntry = listHead;
            }

            // Release lock
            memoryBarrier();
            imageAtomicExchange(spinLockBuffer, coord, 0);
            done = true;
        }
    }

    // Store material
    uvec4 data1, data2;
    packTransparentMaterial(tm, data1, data2);

    imageStore(materialDataBuffer, int(position)*2, data1);
    imageStore(materialDataBuffer, int(position)*2+1, data2);

    #endif

    discard;

}
