#pragma once

#pragma include "Includes/Configuration.include"
#pragma include "Includes/Structures/ShadowSource.struct"

uniform sampler2D shadowAtlas;

#if defined(USE_HARDWARE_PCF)
uniform sampler2DShadow shadowAtlasPCF;
#endif


// Converts a [0 .. 1] coordinate to atlas space
vec2 convertAtlasCoord(vec2 rawCoord, ShadowSource source) {
    return clamp(rawCoord, 0, 1) * (float(source.resolution) / SHADOW_MAP_ATLAS_SIZE) + source.atlasPos;
}


// http://the-witness.net/news/2013/09/shadow-mapping-summary-part-1/
// Apply a bias to the shadowmaps
vec2 getShadowOffsets(vec3 N, vec3 L) {
    float cos_alpha = saturate(dot(N, L));
    float offset_scale_N = sqrt(1 - cos_alpha*cos_alpha); // sin(acos(L·N))
    float offset_scale_L = offset_scale_N / cos_alpha;    // tan(acos(L·N))
    return vec2(offset_scale_N, min(2, offset_scale_L));
}

// Shadow transformation, replaces the shadow transformation matrix (should be faster)
vec3 reprojectShadow(ShadowSource source, vec3 pos) {
    vec4 projected = source.mvp * vec4(pos, 1);
    return (projected.xyz / projected.w * 0.5) + 0.5;
}

// Compute slope and normal scaled shadow bias
vec3 computeBiasedPosition(vec3 position, float slopeBias, float normalBias, vec3 l, vec3 n) {
    float baseShift = 1.0;
    vec2 offsets = getShadowOffsets(n, l);
    position += baseShift * l * offsets.x * slopeBias;
    position += baseShift * n * offsets.y * normalBias; 
    return position;
}

// Checks if all coordinates are valid
bool coord_inside(vec2 coord, vec2 min_coord, vec2 max_coord) {
    return all(greaterThan(coord, min_coord)) && all(lessThan(coord, max_coord));
}


float pcssKernel(ShadowSource source, vec3 projCoord, float baseBias, vec2 projSize) {

    #if defined(DEBUG_DISABLE_PCSS)
        vec2 centerCoord = convertAtlasCoord(projCoord.xy, source);
        float biasedDepth = projCoord.z - baseBias;
        float sampled = textureLod(shadowAtlas, centerCoord, 0).x;
        return 1.0 - step(sampled, biasedDepth);
    #else

    vec2 centerCoord = convertAtlasCoord(projCoord.xy, source);
   
    vec2 searchRegionRadiusUV = PCSS_SEARCH_RADIUS * projSize;

    float blockerSum = 0.0;
    float numBlockers = 0.0;
    float biasedDepth = projCoord.z - baseBias;


    #undef SHADOW_NUM_PCSS_SEARCH_SAMPLES
    #define SHADOW_NUM_PCSS_SEARCH_SAMPLES 64

    #undef SHADOW_NUM_PCSS_FILTER_SAMPLES
    #define SHADOW_NUM_PCSS_FILTER_SAMPLES 64

    // Find blocker
    for ( int i = 0; i < SHADOW_NUM_PCSS_SEARCH_SAMPLES; ++i )
    {
        vec2 offset = poissonDisk64[i] * searchRegionRadiusUV;
        float shadowMapDepth = texture(shadowAtlas, centerCoord + offset).x;
        float factor = step(shadowMapDepth, biasedDepth);
        numBlockers += factor;
        blockerSum += shadowMapDepth * factor;
    }

    float avgBlockerDepth = blockerSum / numBlockers;
    float penumbraSize = abs(biasedDepth - avgBlockerDepth) / biasedDepth * 20.0;


    // return float(numBlockers) / SHADOW_NUM_PCSS_SEARCH_SAMPLES;

    if (numBlockers < 0.5) return 1.0;

    // penumbraSize = min(max(penumbraSize, 0.01), 1.0);

    vec2 filterRadiusUV = penumbraSize * PCSS_FILTER_RADIUS * projSize;

    // PCF Filter
    float sum = 0.0;

    int pixelOffset = 0;

    for ( int i = 0; i < SHADOW_NUM_PCSS_FILTER_SAMPLES; ++i )
    {
        vec2 offset = poissonDisk64[i] * filterRadiusUV;
        
        #if defined(USE_HARDWARE_PCF)
            // Notice: Maybe use .x? My gtx 670 does not like that though
            sum += 1.0 - textureLod(shadowAtlasPCF, vec3(centerCoord + offset + pixelOffset * offset * 0.1, biasedDepth) , 0);
        
        #else
            float sampled = textureLod(shadowAtlas, centerCoord + offset , 0).x;
            sum += step(sampled, biasedDepth);        
        #endif

    }
    sum /= SHADOW_NUM_PCSS_FILTER_SAMPLES;

    // Avoid banding
    // sum = pow(sum, 2.0);

    return 1.0 - saturate(sum);

    #endif
}


float pcfKernel(ShadowSource source, vec3 projCoord, float baseBias, vec2 projSize) {

    #if defined(DEBUG_DISABLE_PCF)
        vec2 centerCoord = convertAtlasCoord(projCoord.xy, source);
        float biasedDepth = projCoord.z - baseBias;
        float sampled = textureLod(shadowAtlas, centerCoord, 0).x;
        return 1.0 - step(sampled, biasedDepth);
    #else

    vec2 centerCoord = convertAtlasCoord(projCoord.xy, source);
    float biasedDepth = projCoord.z - baseBias;
    vec2 filterRadiusUV = 4.0 * projSize;

    #undef SHADOW_NUM_PCF_SAMPLES
    #define SHADOW_NUM_PCF_SAMPLES 32

    // PCF Filter
    float sum = 0.0;
    for ( int i = 0; i < SHADOW_NUM_PCF_SAMPLES; ++i )
    {
        vec2 offset = poissonDisk32[i] * filterRadiusUV;
        #if defined(USE_HARDWARE_PCF)
            // Notice: Maybe use .x? My gtx 670 does not like that though
            sum += 1.0 - textureLod(shadowAtlasPCF, vec3(centerCoord + offset, biasedDepth) , 0);

        #else
            float sampled = textureLod(shadowAtlas, centerCoord + offset , 0).x;
            sum += step(sampled, biasedDepth);        
        #endif
    }

    sum /= SHADOW_NUM_PCF_SAMPLES;
    return 1.0 - saturate(sum);

    #endif
}


float pcssKernelDynamicSize(Light light, ShadowSource source, vec3 projCoord, float baseBias) {

    #if defined(DEBUG_DISABLE_PCSS)
        return pcssKernel(source, projCoord, baseBias, vec2(1));
    #else

    // Project 2 points on the xy plane to find out the filter radius in shadowmap space.
    // This ensures the correct filtering radius for split shadow sources
    vec3 point1 = vec3(0,0,0);
    vec3 point2 = normalize(cross(vec3(0, 0, 1), light.direction));
    point2 *= PCSS_RADIUS_WS;

    vec3 proj1 = reprojectShadow(source, point1);
    vec3 proj2 = reprojectShadow(source, point2);

    // The filter size is the difference of both lightspace pixels
    vec2 projSize = abs(proj1.xy - proj2.xy);
    projSize = vec2(max(projSize.x, projSize.y));

    return pcssKernel(source, projCoord, baseBias, projSize);
    
    #endif
}


float computeShadowsForSource(ShadowSource source, Material material, vec3 n, vec3 l, 
    float slopeScaledBias, float normalScaledBias, float baseBias) {

    #if defined(DEBUG_DISABLE_SHADOWS)
        return 1.0;
    #endif

    vec3 biasedPos = computeBiasedPosition(material.position, slopeScaledBias, normalScaledBias, n, l);
    vec3 projCoord = reprojectShadow(source, biasedPos);

    // float pixScaled = 0.0 / float(source.resolution);

    // if (any(lessThan(projCoord.xy, vec2(pixScaled))) || any(greaterThan(projCoord.xy, vec2(1-pixScaled)))) {
        // return 1.0;
    // }

    return pcfKernel(source, projCoord, baseBias, vec2(0.5 / SHADOW_MAP_ATLAS_SIZE) );
}


int computePSSMShadowSourceIndex(Light light, vec3 position, float borderFactor, out vec3 projCoord) {
    int shadow_map_index = DIRECTIONAL_LIGHT_SPLIT_COUNTS;
    projCoord = vec3(0);

    for (int i = 0; i < DIRECTIONAL_LIGHT_SPLIT_COUNTS; i++) {
        int sourceIndex = light.sourceIndexes[i];
        ShadowSource source = shadowSources[sourceIndex];
        projCoord = reprojectShadow(source, position);

        if (all(greaterThan(projCoord.xy, vec2(borderFactor))) && all(lessThan(projCoord.xy, vec2(1-borderFactor)))) {
            // Source can be used
            shadow_map_index = i;
            break;
            // return i;
        }
    }
    // return 4;
    return shadow_map_index;
}


float computePSSMShadowsForLight(Light light, vec3 position, vec3 n, vec3 l, 
    float slopeScaledBias, float normalScaledBias, float baseBias, out int map_used) {
    map_used = 0;

    #if defined(DEBUG_DISABLE_SHADOWS)
        return 1.0;
    #endif

    vec3 projCoord;
    int shadow_map_index = computePSSMShadowSourceIndex(light, position, SHADOW_PSSM_BORDER_PERCENTAGE, projCoord);
    if (shadow_map_index >= DIRECTIONAL_LIGHT_SPLIT_COUNTS) return 1.0;

    ShadowSource source = shadowSources[light.sourceIndexes[shadow_map_index]];
    float resolutionFactor = 1.0 / source.resolution;

    // vec2 centerCoord = convertAtlasCoord(projCoord.xy, source);
    vec3 biasedPos = computeBiasedPosition(position, slopeScaledBias * resolutionFactor, normalScaledBias * resolutionFactor, n, l);
    projCoord = reprojectShadow(source, biasedPos);
    map_used = shadow_map_index;
    baseBias *= resolutionFactor;

    #if defined(USE_PCSS)
        return pcssKernelDynamicSize(light, source, projCoord, baseBias);
    #else
        return pcfKernel(source, projCoord, baseBias * 2.0, vec2(0.5 / SHADOW_MAP_ATLAS_SIZE));
    #endif
}
