#version 430
// This shader simply clears a texture to a given value

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

// layout(rgba16f) uniform readonly image3D source;
uniform sampler3D source;
uniform int sourceMipmap;
uniform float pixelSize;
uniform int currentMipmapSize;
uniform writeonly image3D dest;
 
void main() {
    ivec3 texelCoords = ivec3(gl_GlobalInvocationID.xyz);
    vec3 localTexCoords = vec3(texelCoords) / float(currentMipmapSize);
    vec3 texelSize = vec3(pixelSize, -pixelSize, 0);

    // localTexCoords += texelSize.xxx*0.25;

    ivec3 texelCoordsUpper = texelCoords * 2;
    vec4 combined;

    // TODO: We can make this much faster with bilinear interpolation

    // Center
    combined += texelFetch(source, texelCoordsUpper + ivec3(0,0,0), sourceMipmap) * 0.25;

    // Center neighbors
    combined += texelFetch(source, texelCoordsUpper + ivec3(1,0,0), sourceMipmap) * 0.125;
    combined += texelFetch(source, texelCoordsUpper + ivec3(-1,0,0), sourceMipmap) * 0.125;
    combined += texelFetch(source, texelCoordsUpper + ivec3(0,1,0), sourceMipmap) * 0.125;
    combined += texelFetch(source, texelCoordsUpper + ivec3(0,-1,0), sourceMipmap) * 0.125;
    combined += texelFetch(source, texelCoordsUpper + ivec3(0,0,1), sourceMipmap) * 0.125;
    combined += texelFetch(source, texelCoordsUpper + ivec3(0,0,-1), sourceMipmap) * 0.125;

    // Corners
    combined += texelFetch(source, texelCoordsUpper + ivec3(1 ,1 ,1), sourceMipmap) * 0.0625;
    combined += texelFetch(source, texelCoordsUpper + ivec3(-1,1 ,1), sourceMipmap) * 0.0625;
    combined += texelFetch(source, texelCoordsUpper + ivec3(1 ,-1,1), sourceMipmap) * 0.0625;
    combined += texelFetch(source, texelCoordsUpper + ivec3(-1,-1,1), sourceMipmap) * 0.0625;
    combined += texelFetch(source, texelCoordsUpper + ivec3(1 ,1 ,-1), sourceMipmap) * 0.0625;
    combined += texelFetch(source, texelCoordsUpper + ivec3(-1,1 ,-1), sourceMipmap) * 0.0625;
    combined += texelFetch(source, texelCoordsUpper + ivec3(1 ,-1,-1), sourceMipmap) * 0.0625;
    combined += texelFetch(source, texelCoordsUpper + ivec3(-1,-1,-1), sourceMipmap) * 0.0625;

    // float kernelRadius = 2.5;

    // combined = texture(source, localTexCoords);
    // combined += texture(source, localTexCoords + texelSize.xzz*kernelRadius);
    // combined += texture(source, localTexCoords + texelSize.zxz*kernelRadius);
    // combined += texture(source, localTexCoords + texelSize.zzx*kernelRadius);
    // combined += texture(source, localTexCoords + texelSize.yzz*kernelRadius);
    // combined += texture(source, localTexCoords + texelSize.zyz*kernelRadius);
    // combined += texture(source, localTexCoords + texelSize.zzy*kernelRadius);

    imageStore(dest, texelCoords, combined );
}