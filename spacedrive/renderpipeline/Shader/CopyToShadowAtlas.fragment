#version 440

#extension GL_ARB_shader_image_load_store : enable


in vec2 texcoord;


layout(rg16f) uniform writeonly image2D atlas;

#include "Includes/Configuration.include"
#include "Includes/ShadowSource.include"
#include "Includes/Packing.include"
#include "Includes/PositionReconstruction.include"

uniform int numUpdates;
uniform sampler2DArray renderResult;
uniform float osg_FrameTime;

uniform ShadowSource updateSources[SHADOW_MAX_UPDATES_PER_FRAME];


void main() {
    
    #if 1
    for (int pass = 0; pass < numUpdates; pass++) {
    // int pass = 0;
        ShadowSource current = updateSources[pass];
        ivec2 offsetCoord = ivec2( texcoord * current.resolution );
        ivec2 passDisplace = ivec2(current.atlasPos * SHADOW_MAP_ATLAS_SIZE);


        float result = texture(renderResult, vec3(texcoord, pass)).x;
        // float result = vec4(texcoord, 0,  1);
        // result = vec4(sin(osg_FrameTime)*0.5 + 0.5, float(pass / 3.0), 0, 1);

        // if (offsetCoord.x < 20 || offsetCoord.y <= 20 || offsetCoord.x > current.resolution - 20 || offsetCoord.y > current.resolution - 20) {
        //     result = vec4(1,0,0,1);
        // }


        imageStore(atlas, offsetCoord + passDisplace, vec4(packDepth(result.x),0, 0) );
        // imageStore(atlas, offsetCoord + passDisplace, vec4(result,0,0, 0) );
        // imageStore(atlas, offsetCoord + passDisplace, vec4(d*30.0) );
        // imageStore(atlas, offsetCoord + passDisplace, vec4(result) );
        // imageStore(atlas, offsetCoord + passDisplace, vec4(texcoord, 0, 0) );
        // imageStore(atlas, offsetCoord + passDisplace, vec4(result.xy, 0, 0) );
    }

    #endif

    gl_FragColor = vec4(1,0,1, 1);

}