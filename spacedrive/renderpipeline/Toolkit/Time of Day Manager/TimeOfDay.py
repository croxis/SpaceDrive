
from DayProperty import DayProperty
from DebugObject import DebugObject
from direct.stdpy.file import open, isfile


class TimeOfDay(DebugObject):

    """ This class manages the time of day settings. It has a list of all
    available properties and can interpolate between them """

    def __init__(self):
        """ Creates a new time of day instance. Remember to call load() before
        using this instance """
        DebugObject.__init__(self, "TimeOfDay")
        self._createProperties()

    def _createProperties(self):
        """ Internal method to populate the property list """
        p = {}
        self.categories = {
            'sun': 'Sun',
            'cat2': 'Category 2',
            'cat3': 'Category 3'
        }

        p['sun.angle'] = DayProperty("Sun Angle", "float", 0.0, 360.0, 0.0, """
             """)

        p['sun.height'] = DayProperty("Sun Height", "float", 0.0, 1.0, 0.5, """
             """)

        p['cat3.test3'] = DayProperty("Test Property 3", "float", 0.0, 1.0, 0.6, """
             """)

        self.properties = p

    def getProperties(self):
        """ Returns all properties """
        return self.properties

    def getProperty(self, prop):
        """ Returns a property by id """
        return self.properties[prop]

    def load(self, filename):
        """ Loads the property values from <filename> """

        self.debug("Loading from", filename)

        if not isfile(filename):
            self.error("Could not load", filename)
            return False

        with open(filename, "r") as handle:
            content = handle.readlines()

        for line in content:
            line = line.strip()
            if len(line) < 1 or line.startswith("#"):
                continue
            parts = line.split()

            if len(parts) != 2:
                self.warn("Invalid line:", line)
                continue

            propId = parts[0]
            propData = parts[1]

            if propId not in self.properties:
                self.warn("Invalid ID:", propId)
                continue

            prop = self.properties[propId]

            if not (propData.startswith("[") and propData.endswith("]")):
                self.warn("Invalid data:", propData)

            propData = propData[1:-1].split(";")
            propData = [prop.propType.convertString(i) for i in propData]

            if len(propData) != 8:
                self.warn("Data count does not match for", propId)
                continue

            prop.values = propData
            prop.recompute()

    def save(self, dest):
        """ Writes the default property file to a given location """
        output = "# Autogenerated by Time of Day Manager\n"
        output += "# Do not edit! Your changes will be lost.\n"

        for propid, prop in self.properties.items():
            output += propid + \
                " [" + ";".join([str(i) for i in prop.values]) + "]\n"

        with open(dest, "w") as handle:
            handle.write(output)
