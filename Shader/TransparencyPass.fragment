#version 400



#extension GL_EXT_shader_image_load_store : enable

#pragma include "Includes/Configuration.include"

in vec2 texcoord;
out vec4 colorResult;


// layout (rgba8) uniform image2DArray transparencyLayers;
// layout (r32f) uniform image2DArray transparencyDepthLayers;
layout (r32i) uniform iimage2D pixelCountBuffer;
layout (r32ui) uniform uimage2D listHeadBuffer;
layout (rgba32ui) uniform uimageBuffer materialDataBuffer;
layout (r32i) coherent uniform iimage2D spinLockBuffer;


#pragma include "Includes/Transparency.include"


uniform sampler2D sceneTex;
uniform sampler2D depthTex;



// Temporary structure used for sorting
struct MaterialPointer {
    uint pointer;
    float depth;
};


#define MAX_TRANSPARENCY_LAYERS 10


//Bubble sort used to sort fragments
MaterialPointer[MAX_TRANSPARENCY_LAYERS] bubbleSortFragments(MaterialPointer fragments[MAX_TRANSPARENCY_LAYERS], int size) {
  for (int i = (size - 2); i >= 0; --i) {
    for (int j = 0; j <= i; ++j) {
      if (fragments[j].depth < fragments[j+1].depth) {
        MaterialPointer temp;
        temp.pointer = fragments[j+1].pointer;
        temp.depth = fragments[j+1].depth;

        fragments[j+1].pointer = fragments[j].pointer;
        fragments[j+1].depth = fragments[j].depth;

        fragments[j].pointer = temp.pointer;
        fragments[j].depth = temp.depth;
      }
    }
  }
  return fragments;
}


void main() {

    ivec2 coord = ivec2(gl_FragCoord.xy);

    // Fetch list head
    uint listHead = imageLoad(listHeadBuffer, ivec2(gl_FragCoord.xy)).x;

    // Early out .. have to test if that faster
    // if (listHead == 0) discard; 


    // Store parts of the data in registers
    MaterialPointer fragments[MAX_TRANSPARENCY_LAYERS];

    // Clear data?
    // for (int i = 0; i < MAX_TRANSPARENCY_LAYERS; i++) {
    //     fragments[i].pointer = 0;
    //     fragments[i].depth = 0.0;
    // }

    // Copy parts of the data
    uint currentEntry = listHead;
    int entryCounter = 0;
    while (currentEntry != 0 && entryCounter < MAX_TRANSPARENCY_LAYERS) {

        fragments[entryCounter].pointer = currentEntry;
        fragments[entryCounter].depth = extractMaterialDepth(currentEntry);

        currentEntry = extractMaterialNextPointer(currentEntry);
        entryCounter ++;
    }


    // Sort data
    fragments = bubbleSortFragments(fragments, entryCounter);
    

    // Render Data
    vec4 currentData = texture(sceneTex, texcoord);
    vec3 currentColor = currentData.xyz;

    float currentOcclusion = currentData.w; 

    for (int i = 0; i < entryCounter; i++) {
        uvec4 data = imageLoad(materialDataBuffer, int(fragments[i].pointer));
        TransparentMaterial tm = unpackTransparentMaterial(data);

        float cf = dot(tm.normal, vec3(0, 0, 1));

        currentColor = currentColor * (1.0-tm.alpha) + tm.color * cf * tm.alpha;
        // currentColor -= tm.depth * 0.1;
        currentOcclusion *= tm.alpha;    

    }

    colorResult = vec4(currentColor, currentOcclusion);

    // colorResult = vec4( pow(fragments[0].depth, 200.0) );

}
