#version 400



#extension GL_EXT_shader_image_load_store : enable

#pragma include "Includes/Configuration.include"
#pragma include "Includes/LightingModels.include"

in vec2 texcoord;
out vec4 colorResult;


// layout (rgba8) uniform image2DArray transparencyLayers;
// layout (r32f) uniform image2DArray transparencyDepthLayers;
uniform isampler2D pixelCountBuffer;
uniform usampler2D listHeadBuffer;
uniform usamplerBuffer materialDataBuffer;
uniform isampler2D spinLockBuffer;

#pragma include "Includes/TransparentMaterial.include"
#pragma include "Includes/PositionReconstruction.include"


uniform sampler2D sceneTex;
uniform sampler2D depthTex;
uniform sampler2D positionTex;


uniform samplerCube fallbackCubemap;

uniform vec3 cameraPosition;

uniform mat4 currentMVP;


// Temporary structure used for sorting
struct MaterialPointer {
    uint pointer;
    float depth;
};


//Bubble sort used to sort fragments
MaterialPointer[MAX_TRANSPARENCY_LAYERS] bubbleSortFragments(MaterialPointer fragments[MAX_TRANSPARENCY_LAYERS], int size) {
  for (int i = (size - 2); i >= 0; --i) {
    for (int j = 0; j <= i; ++j) {
      if (fragments[j].depth < fragments[j+1].depth) {
        MaterialPointer temp;
        temp.pointer = fragments[j+1].pointer;
        temp.depth = fragments[j+1].depth;

        fragments[j+1].pointer = fragments[j].pointer;
        fragments[j+1].depth = fragments[j].depth;

        fragments[j].pointer = temp.pointer;
        fragments[j].depth = temp.depth;
      }
    }
  }
  return fragments;
}


vec3 convertCubemapCoordBecauseIFailed(vec3 coord) {
    return normalize(coord.xzy * vec3(1,-1,1));
}

void main() {

    ivec2 coord = ivec2(gl_FragCoord.xy);



    // Render Data
    vec4 currentData = texture(sceneTex, texcoord);
    vec3 currentColor = currentData.xyz;
    float currentOcclusion = currentData.w; 

    #if !defined(DEBUG_DISABLE_TRANSPARENCY)

    // Fetch list head
    uint listHead = texelFetch(listHeadBuffer, coord, 0).x;

    uint totalEntryCount = texelFetch(pixelCountBuffer, ivec2(0), 0).x;

    // Early out .. have to test if that is faster
    if (listHead == 0) {
        colorResult = vec4(currentColor, currentOcclusion);
        return;
    } 


    // Store parts of the data in registers
    MaterialPointer fragments[MAX_TRANSPARENCY_LAYERS];

    // Clear data?
    // for (int i = 0; i < MAX_TRANSPARENCY_LAYERS; i++) {
    //     fragments[i].pointer = 0;
    //     fragments[i].depth = 0.0;
    // }

    // Copy parts of the data
    uint currentEntry = listHead;
    int entryCounter = 0;
    while (currentEntry != 0 && entryCounter < MAX_TRANSPARENCY_LAYERS) {

        fragments[entryCounter].pointer = currentEntry;
        fragments[entryCounter].depth = extractMaterialDepth(texelFetch(materialDataBuffer, int(currentEntry)));

        currentEntry = texelFetch(materialDataBuffer, int(currentEntry)).w;
        entryCounter ++;
    }


    // Sort data
    fragments = bubbleSortFragments(fragments, entryCounter);
    

    // Check scene depth
    vec3 pixelPos = texelFetch(positionTex, coord,0).xyz;
    float pixelDist = distance(cameraPosition, pixelPos) / CAMERA_FAR;


    // Get some vectors
    vec3 v = normalize(cameraPosition - pixelPos);
    vec3 l = normalize(vec3(0.4,0.7,0.3));

    float roughness = 0.15;
    // Material fakeTransMat;
    // Light fakeLight;
    // fakeLight.color = vec3(1);


    for (int i = 0; i < entryCounter; i++) {
        uvec4 data = texelFetch(materialDataBuffer, int(fragments[i].pointer));
        TransparentMaterial tm = unpackTransparentMaterial(data);

        if (tm.depth > pixelDist) continue;


        // tm.color = vec3(0.2,0.6,1.0);
        // tm.color = vec3(1);


        vec3 tmPos = calculateSurfacePos(tm.depth, texcoord);

        vec3 n = tm.normal;
        vec3 h = normalize(l + v);

        // Evaluate specular
        // vec3 specularContribution = computeSpecular(specularColor, roughness, NxL, LxH, NxV, NxH) * NxL;

        vec3 composedColor = vec3(0);
        // vec3 specularColor = tm.color;
        vec3 specularColor = vec3(1);

        // pre-computed cross products
        float NxL = saturate(dot(n, l));
        float LxH = saturate(dot(l, h));
        float NxV = abs(dot(n, v)) + 1e-5;
        float NxH = saturate(dot(n, h));


        float specularD = DistributionBRDF(roughness, NxH);
        float specularG = GeometricBRDF(roughness, NxV, NxL);
        vec3  specularF = FresnelBRDF(specularColor, LxH);

        vec3 specularComp = (specularF * specularG) * specularD;

        // specular
        composedColor += specularComp;

        // diffuse
        // composedColor += tm.color;
        // composedColor += saturate(NxL+0.0);

        composedColor += vec3(0.3) * tm.color;



        vec3 reflectedDir = reflect( -v, n );

        // ambient reflections
        vec3 ambientRefColor = textureLod(fallbackCubemap, convertCubemapCoordBecauseIFailed(reflectedDir), 0).rgb;
        // ambientRefColor = pow(ambientRefColor,  vec3(1.5));

        composedColor += ambientRefColor * 0.35;


        float glassBorderFactor = 1.0 - saturate(dot(v, n));
        glassBorderFactor = pow(glassBorderFactor, 3.0);

        // composedColor = vec3(glassBorderFactor);
        composedColor -= glassBorderFactor * 0.2;


        vec3 refractionVector = refract(v, n, 1.0);
        vec3 refractedPos = tmPos + refractionVector * 0.001;

        vec4 refPosReconstruct = currentMVP * vec4(refractedPos, 1);
        refPosReconstruct.xyz = (refPosReconstruct.xyz / refPosReconstruct.w) * 0.5 + 0.5;

        vec2 texelOffset = normalize(refPosReconstruct.xy - texcoord);


        // currentColor = texture(sceneTex, texcoord + texelOffset * 0.005).xyz;

        // composedColor = pow(composedColor, vec3(1.0 / 2.2));


        // composedColor = tm.normal;
        // tm.alpha = 1.0;
        // cf += 
        // cf = dot(v, tm.normal);

        // composedColor = vec3(tm.normal.z);
        // tm.alpha = 1.0;

        // currentColor = currentColor * (1.0-tm.alpha) + tm.color * tm.alpha * specularComp;
        currentColor = currentColor * (1.0-tm.alpha) + composedColor * tm.alpha;

        // Reduces occlusion but still avoids halos
        currentOcclusion *= saturate(tm.alpha + 0.5);    
    }


    #endif

    // currentColor = vec3( float(texelFetch(listHeadBuffer, coord, 0).x) / 1000000.0);
    colorResult = vec4(currentColor, currentOcclusion);

}
