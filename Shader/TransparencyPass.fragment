#version 400



#extension GL_EXT_shader_image_load_store : enable

#pragma include "Includes/Configuration.include"
#pragma include "Includes/LightingModels.include"

in vec2 texcoord;
out vec4 colorResult;


// layout (rgba8) uniform image2DArray transparencyLayers;
// layout (r32f) uniform image2DArray transparencyDepthLayers;
uniform isampler2D pixelCountBuffer;
uniform usampler2D listHeadBuffer;
uniform usamplerBuffer materialDataBuffer;
uniform isampler2D spinLockBuffer;

#pragma include "Includes/TransparentMaterial.include"
#pragma include "Includes/PositionReconstruction.include"


uniform sampler2D sceneTex;
uniform sampler2D depthTex;
uniform sampler2D positionTex;


uniform samplerCube fallbackCubemap;

uniform vec3 cameraPosition;

uniform mat4 currentMVP;


// Temporary structure used for sorting
struct MaterialPointer {
    uint pointer;
    float depth;
};


//Bubble sort used to sort fragments
MaterialPointer[MAX_TRANSPARENCY_LAYERS] bubbleSortFragments(MaterialPointer fragments[MAX_TRANSPARENCY_LAYERS], int size) {
  for (int i = (size - 2); i >= 0; --i) {
    for (int j = 0; j <= i; ++j) {
      if (fragments[j].depth < fragments[j+1].depth) {
        MaterialPointer temp;
        temp.pointer = fragments[j+1].pointer;
        temp.depth = fragments[j+1].depth;

        fragments[j+1].pointer = fragments[j].pointer;
        fragments[j+1].depth = fragments[j].depth;

        fragments[j].pointer = temp.pointer;
        fragments[j].depth = temp.depth;
      }
    }
  }
  return fragments;
}


vec3 convertCubemapCoordBecauseIFailed(vec3 coord) {
    return normalize(coord.xzy * vec3(1,-1,1));
}

void main() {

    ivec2 coord = ivec2(gl_FragCoord.xy);


    // Render Data
    vec4 currentData = texture(sceneTex, texcoord);
    vec3 currentColor = currentData.xyz;
    float currentOcclusion = currentData.w; 

    #if !defined(DEBUG_DISABLE_TRANSPARENCY)

    // Fetch list head
    uint listHead = texelFetch(listHeadBuffer, coord, 0).x;

    uint totalEntryCount = texelFetch(pixelCountBuffer, ivec2(0), 0).x;

    // Early out .. have to test if that is faster
    if (listHead == 0) {
        colorResult = vec4(currentColor, currentOcclusion);
        return;
    } 

    // Transparency does not support debug render modes, so just hide transparent 
    // objects in case a debugmode is active
    #if defined(DEBUG_VISUALIZATION_ACTIVE)
        colorResult = vec4(currentColor, currentOcclusion);
        return;
    #endif

    // Store parts of the data in registers
    MaterialPointer fragments[MAX_TRANSPARENCY_LAYERS];

    // Copy parts of the data
    uint currentEntry = listHead;
    int entryCounter = 0;
    while (currentEntry != 0 && entryCounter < MAX_TRANSPARENCY_LAYERS) {

        fragments[entryCounter].pointer = currentEntry;
        fragments[entryCounter].depth = extractMaterialDepth(texelFetch(materialDataBuffer, int(currentEntry)*2));

        currentEntry = texelFetch(materialDataBuffer, int(currentEntry)*2).w;
        entryCounter ++;
    }


    // Sort data
    fragments = bubbleSortFragments(fragments, entryCounter);
    

    // Check scene depth
    vec3 pixelPos = texelFetch(positionTex, coord,0).xyz;
    float pixelDepth = texelFetch(depthTex, coord,0).x;
    // float pixelDist = distance(cameraPosition, pixelPos) / TRANSPARENCY_RANGE;

    for (int i = 0; i < entryCounter; i++) {
        uvec4 data1 = texelFetch(materialDataBuffer, int(fragments[i].pointer)*2);
        uvec4 data2 = texelFetch(materialDataBuffer, int(fragments[i].pointer)*2+1);
        TransparentMaterial tm = unpackTransparentMaterial(data1, data2);
        tm.color *= 2.0;

        if (tm.depth > pixelDepth) continue;

        currentColor = currentColor * (1.0-tm.alpha) + tm.color * tm.alpha;

        // Reduces occlusion but still avoids halos
        currentOcclusion *= saturate(tm.alpha + 0.5);
    }


    #endif


    colorResult = vec4(currentColor, currentOcclusion);

}
