#version 400


#extension GL_ARB_shader_image_load_store : enable

// Required, or it runs incredible slow
#pragma optionNV (unroll all)

#pragma include "Includes/Configuration.include"
#pragma include "Includes/Light.include"
#pragma include "Includes/Material.include"
#pragma include "Includes/ShadowSource.include"
#pragma include "Includes/PositionReconstruction.include"


// Light-IDs per tile
uniform isamplerBuffer lightsPerTileBuffer;
uniform ivec2 lightingTileCount;
uniform Light lights[MAX_VISIBLE_LIGHTS]; 
uniform ShadowSource shadowSources[SHADOW_MAX_TOTAL_MAPS]; 


in vec2 texcoord;

uniform sampler2D wsPositionTex;
uniform sampler2D wsNormalTex;
uniform vec3 cameraPosition;

#pragma include "Includes/Lighting.include"


out vec4 resultColor;



vec3 computeVolumetricLighting(Light light, vec3 position, vec3 n, vec3 l) {

    int rayOffsets[64] = int[64](
    30, 32, 23, 54, 39, 38, 24, 21, 57, 1, 42, 34, 8, 55, 14, 49, 31, 53, 2, 20, 50
    , 0, 27, 13, 35, 9, 46, 18, 51, 28, 15, 60, 10, 52, 7, 36, 44, 5, 47, 19, 43, 58
    , 25, 6, 11, 61, 29, 3, 37, 22, 45, 4, 26, 41, 62, 33, 48, 17, 63, 40, 56, 59, 16, 12);


    vec3 startPos = cameraPosition;

    vec3 dir = (position - cameraPosition);

    const float volumetricDistance = 30.0;
    const int tileSize = 4;

    ivec2 relativeOffset = ivec2(gl_FragCoord) % tileSize;
    // float rayOffset = rayOffsets[relativeOffset.x + relativeOffset.y * 8] / 64.0;
    float rayOffset = (relativeOffset.x + relativeOffset.y * tileSize) / 64.0;


    if (length(dir) > volumetricDistance) {
        dir = normalize(dir) * volumetricDistance;
    }

    vec3 endPos = cameraPosition + dir;

    const int numSteps = 32;
    vec3 posStep = (endPos - startPos) / float(numSteps);

    vec3 currentPos = startPos + rayOffset * posStep;
    vec3 projCoord = vec3(0);

    // float w = length(material.position);

    float resultSum = 0.0;

    for (int i = 0; i < numSteps - 1; i++) {
        currentPos += posStep;
        // int sourceIdx = computePSSMShadowSourceIndex(light, currentPos, 0.0, projCoord);
        int sourceIdx = 3;
        // if (sourceIdx < 4) {
            ShadowSource source = shadowSources[light.sourceIndexes[sourceIdx]];
            float resolutionFactor = 1.0 / source.resolution;
            vec3 biasedPos = computeBiasedPosition(currentPos, 40 * resolutionFactor, 60 * resolutionFactor, n, l);
            projCoord = reprojectShadow(source, biasedPos);

            vec2 centerCoord = convertAtlasCoord(projCoord.xy, source);

            #if USE_HARDWARE_PCF
                // Notice: Maybe use .x? My gtx 670 does not like that though
                resultSum += 1.0 - textureLod(shadowAtlasPCF, vec3(centerCoord, projCoord.z) , 0);
            
            #else
                float sampled = textureLod(shadowAtlas, centerCoord, 0).x;
                resultSum += step(sampled, projCoord.z);        
            #endif


        // }

    }

    resultSum /= float(numSteps);
    resultSum *= 5.0;
    // resultSum = pow(resultSum, 14.0);
    // resultSum *= 0.5;
    resultSum = 1.0 - saturate(resultSum) * 0.8;

    // resultSum = 1.0 - saturate(1.0 - resultSum);

    return vec3(resultSum);
}



void main() {
    // Compute texcoords
    ivec2 screenCoord = ivec2(gl_FragCoord.xy) * 2;
   
    ivec2 tileIndex = ivec2(vec2(screenCoord) / 
        vec2(LIGHTING_COMPUTE_PATCH_SIZE_X, LIGHTING_COMPUTE_PATCH_SIZE_Y));
    ivec2 precomputeCoord = tileIndex * 8;
    int tileBufferOffset = (tileIndex.x + tileIndex.y * lightingTileCount.x) * LIGHTING_PER_TILE_STRIDE;


    // Check how many shadowed directional lights affect this tile
    int countDirectionalLightShadow = min(MAX_TILE_SHADOWED_DIRECTIONAL_LIGHTS, 
        texelFetch(lightsPerTileBuffer, tileBufferOffset + 3).x);

    if (countDirectionalLightShadow < 1) {
        resultColor = vec4(1,0,0,1);
        return;
    }

    // Fetch the directional light index
    int currentTileOffset = tileBufferOffset + 16;
    currentTileOffset += MAX_TILE_POINT_LIGHTS;
    currentTileOffset += MAX_TILE_SHADOWED_POINT_LIGHTS;
    currentTileOffset += MAX_TILE_DIRECTIONAL_LIGHTS;

    int lightId = texelFetch(lightsPerTileBuffer, currentTileOffset).x;
    Light light = lights[lightId];
 

    #if 1
        vec3 wsPosition = texelFetch(wsPositionTex, screenCoord, 0).xyz;
        vec3 wsNormal = texelFetch(wsNormalTex, screenCoord, 0).xyz;
    #else
        vec3 wsPosition = texture(wsPositionTex, texcoord).xyz;
        vec3 wsNormal = texture(wsNormalTex, texcoord).xyz;
    #endif

    int mapUsed = 0;
    vec3 l = normalize(light.position - wsPosition);
    // float shadows = computePSSMShadowsForLight(light, wsPosition, wsNormal, l, 40.0, 60.0, 0.015, mapUsed);

    vec3 volumetric = computeVolumetricLighting(light, wsPosition, wsNormal, l);

    resultColor = vec4(volumetric, 1);

}