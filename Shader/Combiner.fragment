#version 400
#pragma file "Combiner.fragment"

#include "Includes/Configuration.include"
#include "Includes/PositionReconstruction.include"

in vec2 texcoord;

uniform sampler2D currentComputation;

uniform sampler2D lastFrame;
uniform sampler2D lastPosition;

uniform sampler2D positionBuffer;
uniform sampler2D velocityBuffer;
uniform sampler2D depthTex;


#ifdef USE_DOF
    layout(r16f) writeonly uniform image2D dofStorage;
#endif

uniform int temporalProjXOffs;

uniform mat4 lastMVP;
uniform mat4 currentMVP;
uniform vec3 cameraPosition;

out vec4 result;

const float rejectionFactor = 100.0;
const float texcoordRejectionFactor = 0.5;

void main() {

    // Fetch screen size, so we don't have to pass it as a shader input
    ivec2 screenSize = textureSize(positionBuffer, 0);

    // Screen coordinate (as int vec)
    ivec2 screenCoord = ivec2(gl_FragCoord.xy);

    // Screen coordinate (half resolution only)
    ivec2 computationCoord = ivec2( screenCoord.x/2, screenCoord.y);

    #ifdef USE_DOF
        // Compute dof factors
        float bufferZ = texture(depthTex, texcoord).x;
        float linearZ = getLinearZFromZ(bufferZ);
        float dofFactor = (linearZ-4.0)/1.0;
        dofFactor = 0.0;

        // Store dof in the storage
        imageStore(dofStorage, screenCoord, vec4(saturate(dofFactor)) );
    #endif

    vec3 position = texelFetch(positionBuffer, screenCoord, 0).rgb;

    // The last computed value (half resolution only, but up-to-date)
    vec4 lastComputedValue = texelFetch(currentComputation, computationCoord, 0);
    vec2 velocity = -texture(velocityBuffer, texcoord).rg / 255.0;

    vec4 lastProj = lastMVP * vec4(position, 1);
    vec2 lastTexcoord = (lastProj.xy / lastProj.w) * 0.5 + 0.5;
    vec2 newVelocity = (texcoord - lastTexcoord);
    vec2 texelSize = 1.0 / screenSize;

    vec2 lastFrameTexcoord = texcoord - velocity;
    ivec2 lastFrameTexcoordInt = ivec2(lastFrameTexcoord * screenSize);
    vec4 oldProjectedColor = texture(lastFrame, lastFrameTexcoord);
    vec3 oldProjectedPos = texture(lastPosition, lastFrameTexcoord).rgb;
    
    vec4 bestLastProjected = texture(lastFrame, lastFrameTexcoord);
    float distanceToCamera = distance(cameraPosition, position);
    
    float reliability = 1.0 - saturate( (distance(oldProjectedPos, position) / distanceToCamera) * rejectionFactor);

    // reliability = 1.0;

    ivec2 clampMax = ivec2(screenSize) - 1;
    ivec2 clampMin = ivec2(1);


    if ( clamp(lastFrameTexcoordInt, clampMin, clampMax) != lastFrameTexcoordInt ) {
        reliability = 0.0;
    }

    result = mix(lastComputedValue, bestLastProjected, saturate(reliability));

    if ( (screenCoord.x+screenCoord.y) % 2 == 1-temporalProjXOffs) {
        result = vec4(lastComputedValue);
    } 

}