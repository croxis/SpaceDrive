#version 430


#pragma include "Includes/Configuration.include"
#pragma include "Includes/Material.include"
#pragma include "Includes/PositionReconstruction.include"
#pragma include "Includes/ColorCorrection.include"

// Required, otherwise quite slow
#pragma optionNV (unroll all)

uniform sampler2D data0;
uniform sampler2D data1;
uniform sampler2D data2;
uniform sampler2D data3;
uniform vec3 cameraPosition;

in vec2 texcoord;

layout(location=0) out vec4 giColorResult;
layout(location=1) out vec4 giSpecularResult;

#pragma include "Includes/GlobalIllumination.include"

void main() {

    // Screen coordinate (as int vec)
    ivec2 screenCoord = ivec2(gl_FragCoord.xy) * 2;

    vec4 specularResult = vec4(0);

    #ifdef DEBUG_DISABLE_GI
        giColorResult = vec4(1.0);
        giSpecularResult = vec4(0);
    #else

    // Extract material data
    vec4 target0data = texelFetch(data0, screenCoord, 0);
    vec4 target1data = texelFetch(data1, screenCoord, 0);
    vec4 target2data = texelFetch(data2, screenCoord, 0);
    vec4 target3data = texelFetch(data3, screenCoord, 0);
    Material material = unpackMaterial(target0data, target1data, target2data, target3data);

    vec3 viewVector = normalize(material.position - cameraPosition);
    vec4 giResult = computeGlobalIllumination(material, viewVector, giData, specularResult, material.normal, cameraPosition);

    giColorResult = vec4(giResult.xyz, 1.0);
    giSpecularResult = vec4(specularResult);
    #endif

}