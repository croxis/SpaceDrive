#version 400

#pragma optionNV (unroll all)
#extension GL_EXT_shader_image_load_store : enable

#pragma include "Includes/Configuration.include"
#pragma include "Includes/PositionReconstruction.include"
#pragma include "Includes/ChromaticAbberation.include"
#pragma include "Includes/ColorCorrection.include"
#pragma include "Includes/FilmGrain.include"
#pragma include "Includes/PoissonDisk.include"


in vec2 texcoord;
uniform sampler2D colorTex;
uniform sampler2D colorLUT;

out vec4 result;

uniform float osg_FrameTime;

// layout (rgba32f) uniform image2D lastFramePosition;
// layout (r16f) uniform image2D lastFrameOcclusion;
// uniform sampler2D currentFramePosition;
// uniform sampler2D computedOcclusion;

void main() {

    // Store last frame position and occlusion
    // ivec2 intCoords = ivec2(gl_FragCoord.xy / 2.0);
    // vec3 lastPosition = texelFetch(currentFramePosition, intCoords * 2, 0).xyz;
    // imageStore(lastFramePosition, intCoords, vec4(lastPosition, 1.0));

    // #if defined(USE_OCCLUSION)
    //     float lastOcclusion = texelFetch(computedOcclusion, intCoords, 0).x;
    //     imageStore(lastFrameOcclusion, intCoords, vec4(lastOcclusion));
    // #endif

    // Screen coordinate (as int vec)
    ivec2 screenCoord = ivec2(gl_FragCoord.xy);




    #if !defined(DEBUG_DISABLE_COLOR_CORRECTION) && !defined(DEBUG_VISUALIZATION_ACTIVE)
                
        // Chromatic abberation
        result.xyz = applyChromaticAbberation(colorTex, texcoord, 0.0);
        
        // Color LUT
        result.xyz = applyColorLUT(colorLUT, result.xyz);

        // Film grain
        result.xyz = computeGrain(result.xyz, texcoord, mod(osg_FrameTime, 1.0) + 1.0);


    #else
        result.xyz =  textureLod(colorTex, texcoord, 0).xyz;
    #endif


    // Vignett
    result.xyz *= 1.0 - smoothstep(0, 1, 
        (length( (texcoord - vec2(0.5, 0.5)) * vec2(1.2, 1.0)  ) - 0.22) ) * 1.0;
    result.w = 1.0;

}
