#version 430

// * Unkown algorithm name*
// developed by tobspr

#include "Includes/Configuration.include"
#include "Includes/PositionReconstruction.include"
#include "Includes/Packing.include"
#include "Includes/GIData.include"

layout (local_size_x = 16, local_size_y = 16) in;

uniform sampler2D atlasDepth;
uniform sampler2D atlasColor;

uniform GIData giData;
uniform mat4 lightMVP;
uniform mat4 lightData;
uniform writeonly image3D target;

// const vec3 texelShift = 0.0 * vec3(0.5, 0.5, 0.5);

uniform mat4 trans_clip_of_lightLens_to_mainRender;

void main() {

  // TODO: Optimize

  // Get coords
  ivec2 texelCoords = ivec2(gl_GlobalInvocationID.xy);

  // // Unpack data
  ivec2 sourceAtlasPos = ivec2(lightData[0].xy);
  int sourceAtlasResolution = int(lightData[0].z); 
  float nearPlane = lightData[1].x;
  float farPlane = lightData[1].y;
  vec3 lightDir = normalize(lightData[2].xyz);
  vec3 color = lightData[3].xyz;

  ivec2 sourceCoords = sourceAtlasPos + texelCoords;

  float texelDepth = texelFetch(atlasDepth, sourceCoords, 0).x;
  vec3  texelColor = texelFetch(atlasColor, sourceCoords, 0).rgb;

  // // Reconstruct world position
  vec2 texcoordLinear = texelCoords / float(sourceAtlasResolution);

  vec3 surfacePos = calculateSurfacePos(texelDepth, texcoordLinear, nearPlane, farPlane, inverse(lightMVP));
  vec3 localPos = (surfacePos - giData.gridStart) / giData.gridScale;
  ivec3 localPosInt = ivec3(localPos * giData.gridSize);
  imageStore(target, localPosInt, vec4( texelColor, 1.0));
  // imageStore(target, ivec3(texelCoords, 0), vec4(surfacePos, 1.0));
}