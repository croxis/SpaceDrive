#version 400

#include "Includes/Configuration.include"
#include "Includes/PoissonDisk.include"

#extension GL_ARB_shader_image_load_store : enable
in vec4 color;
in vec3 normal;
in vec4 positionWorld;
in vec2 texc;

uniform sampler2D p3d_Texture0;

uniform vec3 dv_gridStart;
uniform vec3 dv_gridEnd;
uniform vec3 dv_lightdir;
uniform ivec3 dv_gridResolution;

uniform mat4 dv_mvp;
uniform sampler2D dv_atlas;

uniform vec2 dv_uv_start;
uniform float dv_uv_size;

uniform layout(r32i) iimage3D dv_dest_tex;
out vec4 result;

void main() {

    vec3 voxelSpacePos = (positionWorld.xyz-dv_gridStart) / (dv_gridEnd - dv_gridStart);
    ivec3 voxelCoords = ivec3( (voxelSpacePos * vec3(dv_gridResolution)) + 0.1358293);

    vec4 colorSample = textureLod(p3d_Texture0, texc, 0);

    // if (colorSample.a < 0.5) discard;

    vec3 diffuse = colorSample.xyz * color.xyz;
    // diffuse = color.xyz;

    vec4 projected = dv_mvp * vec4(positionWorld.xyz, 1);
    vec3 projCoord = (projected.xyz / projected.w * 0.5) + 0.5;

    vec2 convertedCoord = projCoord.xy * dv_uv_size + dv_uv_start;
    float pixelSize = 1.0 / SHADOW_MAP_ATLAS_SIZE;
    float kernelRadius = 4.0;

    float shadowSum = 0.0;
    const int voxelShadowSamples = 16;

    for (int i = 0; i < voxelShadowSamples; i++) {
        float sampledDepth = texture(dv_atlas, convertedCoord.xy + poissonDisk64[i] * pixelSize * kernelRadius).x;
        shadowSum += step(sampledDepth, projCoord.z - 0.001);
    }

    shadowSum /= voxelShadowSamples;   

    // diffuse = vec3(0.3);


    float ambientFactor = 0.05;

    float shadowFactor = max(ambientFactor, 1.0 - shadowSum);
    // shadowFactor = 1.0;
    
    // shadowFactor = 1.0;
    vec3 diffuseContribution = clamp(diffuse * 1.0 * shadowFactor * max(ambientFactor, min(1.0, dot(dv_lightdir, normal))), 0, 1);
// 

    // diffuseContribution *= clamp(1.0 - normal.z*0.5, 0.0, 1.0);
    // diffuseContribution = vec3(0.5);

    // diffuseContribution = vec3(colorSample.w);
    // diffuseContribution = vec3(0.5);


    // Convert diffuse contribution to int
    ivec3 resultColorI = clamp(ivec3(diffuseContribution * 255.0), ivec3(0), ivec3(255, 255, 255));  

    // resultColorI = ivec3(255,255,255);
    // Bits:
    // 1 Bit solid
    // 10 Bit R
    // 10 Bit G 
    // 10 Bit B

    // 0000 0000 0000 0000  0000 0000 0000 0000
    // ?BBB BBBB BBGG GGGG  GGGG RRRR RRRR RRRR 
    // F731 F731 F731 F731  F731 F731 F731 F731
    int packedColor = 1 |
                    (resultColorI.r & 0x3FF) << 1 | 
                    (resultColorI.g & 0x3FF) << 11 |
                    (resultColorI.b & 0x3FF) << 21;

    imageAtomicMax(dv_dest_tex, voxelCoords, packedColor);
    // imageAtomicOr(dv_dest_tex, voxelCoords, packedColor);
    // imageStore(dv_dest_tex, voxelCoords, ivec4(packedColor));
    result = vec4(diffuseContribution, 1);
}