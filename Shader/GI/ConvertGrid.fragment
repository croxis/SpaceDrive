#version 430

#pragma include "Includes/Configuration.include"

uniform usampler3D src;
uniform writeonly image3D dest;


out vec4 color;

bool hasVoxel(ivec3 baseCoord, int x, int y, int z) {
    return texelFetch(src, baseCoord + ivec3(x, y, z), 0).x > 0;
}

void main() {
    ivec2 coord = ivec2(gl_FragCoord.xy);
    vec3 vSum = vec3(0);
    for (int z = 0; z < 256; z++) {
        ivec3 localCoord = ivec3(coord, z);
       
        uint data = texelFetch(src, localCoord, 0).x;

        if (data > 0) {

            vec3 normal = vec3(0);
            
            // Compute voxel based normal
            // for (int x = -1; x <= 1; x++) {
            //     for (int y = -1; y <= 1; y++) {
            //         for (int z = -1; z <= 1; z++) {

            //             if (x == 0 && y == 0 && z == 0) continue;
        
            //             uint neighbourData = texelFetch(src, localCoord + ivec3(x, y, z), 0).x;

            //             if (neighbourData == 0) {
            //                 normal += vec3(x, y, z) * (1.0 + abs(sign(z)+sign(x)+sign(y))*0.1);
            //             }

            //         }
            //     }
            // }

            // if (hasVoxel(localCoord, 0, 0, 1))

            // normal = normalize(normal);
            // normal = normalize(unpackUnorm4x8(data).xyz);      
            // normal = vec3(float(data) / 32.0);

            float contribPosX = float(data & 0x1F) / 32.0;
            float contribNegX = float(data >> 5 & 0x1F) / 32.0;

            float contribPosY = float(data >> 10 & 0x1F) / 32.0;
            float contribNegY = float(data >> 15 & 0x1F) / 32.0;

            float contribPosZ = float(data >> 20 & 0x1F) / 32.0;
            float contribNegZ = float(data >> 25 & 0x1F) / 32.0;

            // normal = vec3(contribNegZ);

            normal = vec3(0);

            normal += contribPosX * vec3(1,0,0);
            normal += contribNegX * vec3(-1,0,0);
            normal += contribPosY * vec3(0,1,0);
            normal += contribNegY * vec3(0,-1,0);
            normal += contribPosZ * vec3(0,0,1);
            normal += contribNegZ * vec3(0,0,-1);
            normal = normalize(normal)*0.5 + 0.5;

            // normal = vec3(contribPosZ);
            vSum += normal;

            imageStore(dest, localCoord, vec4(normal, 1)); 
        } else {
            imageStore(dest, localCoord, vec4(0)); 
        }
    }

    color = vec4(vSum * 0.1, 1);

}