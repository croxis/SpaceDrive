#version 140

#include "Includes/Configuration.include"

uniform mat4 p3d_ModelViewProjectionMatrix;
uniform mat4 trans_model_to_world;
in vec4 p3d_Vertex;
in vec3 p3d_Normal;

uniform float scaleFactor;
uniform int effectiveGrid;

out vec3 pos;
out vec3 nrm;
out vec3 voxelSpacePos;
out vec4 voxelResult;

uniform sampler2D giGrid;
uniform sampler2D giColorGrid;

void main() {

    int idx = gl_InstanceID;

    int xOffset = (idx / (effectiveGrid*effectiveGrid)) % effectiveGrid;
    int yOffset = (idx / effectiveGrid) % effectiveGrid;
    int zOffset = idx % (effectiveGrid);
    
    voxelSpacePos = ivec3(vec3(xOffset, yOffset, zOffset) * scaleFactor);

    ivec2 giCoord = ivec2(clamp(voxelSpacePos.xy, 0, 128.0));
    giCoord.x += int(voxelSpacePos.z) * 128;
    voxelResult = texelFetch(giGrid, giCoord, 0);
    vec4 colorResult = texelFetch(giColorGrid, giCoord, 0);

    vec4 wpos = (p3d_Vertex)* 0.5;
    if ( colorResult.w < 0.1) {
        wpos.z -= 9999.0;
    // wpos *= 0.3;
        // wpos *= saturate(voxelResult.w) + 0.1;
    }

    wpos.xyz += vec3(xOffset, yOffset, zOffset) * scaleFactor;
    // wpos.xyz -= 0.5;
    wpos.w = 1.0;

    a

    // voxelResult = colorResult;

    pos = (trans_model_to_world * wpos).xyz;
    nrm = p3d_Normal;

    gl_Position = p3d_ModelViewProjectionMatrix * wpos;
}