#version 430

// * Unkown algorithm name*
// developed by tobspr


#include "Includes/Configuration.include"
#include "Includes/Packing.include"

layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

uniform sampler2D geometryTex;
uniform sampler2D source;
uniform writeonly image2D target;
uniform ivec3 gridSize; 

ivec2 convertCoords(ivec3 src) {
  return clamp(src.xy, ivec2(0), gridSize.xy-1) + ivec2(clamp(src.z, 0, gridSize.z-1)*gridSize.x, 0);
}


const float bounceFactor = 1.0;
const float rangeMultiplier = 4.0;
const float transport = 1.0;
const float colorTransport = 1.0;
const float normalBias = 0.1;
const float exposure = 1.03;


void main() {

  ivec3 texelCoords = ivec3(gl_GlobalInvocationID.xyz);
  ivec2 storeCoord = convertCoords(texelCoords);

  vec4 sampleCenter      = texelFetch(source, storeCoord, 0);
  vec3 centerColor = sampleCenter.xyz;
  float centerProcessed = sampleCenter.w;

  vec4 geometryCenter = texelFetch(geometryTex, storeCoord, 0);
  vec3 normalCenter = geometryCenter.xyz * 4.0 - 2.0;
  float solidCenter = geometryCenter.w;
  
  vec3 colorResult = centerColor;

  const int numDirections = 6; 
  ivec3 directions[numDirections] = ivec3[numDirections](
      
      // Along the axis
      ivec3(0,0,1),
      ivec3(0,0,-1),
      ivec3(0,1,0),
      ivec3(0,-1,0),
      ivec3(1,0,0),
      ivec3(-1,0,0)

      // Diagonal
      // ivec3(1,1,1),
      // ivec3(-1,1,1),
      // ivec3(1,-1,1),
      // ivec3(-1,-1,1),

      // ivec3(1,1,-1),
      // ivec3(-1,1,-1),
      // ivec3(1,-1,-1),
      // ivec3(-1,-1,-1)

      // Diagonal 2
      // ivec3(1,0,1),
      // ivec3(-1,0,1),
      // ivec3(0,-1,1),
      // ivec3(0,1,1),

      // ivec3(1,0,-1),
      // ivec3(-1,0,-1),
      // ivec3(0,-1,-1),
      // ivec3(0,1,-1)
    );

  // if (centerProcessed < 0.5) {

    for (int i = 0; i < numDirections; i++) {
      ivec3 dir = directions[i];
      ivec2 sampleCoords = convertCoords(texelCoords + dir);
      vec4 sampleDirectional = texelFetch(source, sampleCoords, 0);
      vec3 sampleColor = sampleDirectional.xyz;
      vec4 sampleGeometry = texelFetch(geometryTex, sampleCoords, 0);
      float geometrySolid = sampleGeometry.w;
      vec3 sampleNormal = sampleGeometry.xyz * 4.0 - 2.0;
      float sampleProcessed = sampleDirectional.w;

      // if (length(sampleColor) < 0.001) {
        // This voxel stores no color information, so ignore it
        // = Empty Air
        // continue;
      // }
        float normalFactor = step(dot(dir, sampleNormal), 0.0);

      // Solid -> Air
      if (geometrySolid > 0.5 && solidCenter < 0.5) {
        // normalFactor = 1.0;
        colorResult += sampleColor.xyz * normalFactor * 0.5;
        // centerProcessed += normalFactor;


      // Air -> Solid
      } else if(geometrySolid < 0.5 && solidCenter > 0.5) {

        colorResult += sampleColor.xyz * normalFactor * 0.4;
        
        
        // Solid -> Solid
      } else if(geometrySolid > 0.5 && solidCenter > 0.5) {
        // normalFactor = 1.0;
        // colorResult *= 0.0;
      
      // Air -> Air
      } else if (geometrySolid < 0.5 && solidCenter < 0.5) {
        // solidCenter += 1.0;
        colorResult = mix(sampleColor.xyz, colorResult, 0.85) * 1.17;
       
      }
    // }

  }

  colorResult *= 0.6;

  centerProcessed = clamp(centerProcessed, 0, 1);
  // colorResult.xyz = 1.0f - exp(-0.9 * colorResult.xyz);


  // solidCenter = saturate(solidCenter);

  imageStore(target, storeCoord, vec4(colorResult, centerProcessed));
}