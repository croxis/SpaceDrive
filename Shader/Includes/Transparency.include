#pragma once

#pragma include "Includes/Configuration.include"






#define USE_UINT_PACKING 1

struct TransparentMaterial {
    vec3 color;
    uint materialType;
    vec3  normal;
    float alpha;
    float depth;
    uint nextEntry;
};

TransparentMaterial getDefaultTransparentMaterial() {
    TransparentMaterial tm;
    tm.color = vec3(1);
    tm.materialType = 0;
    tm.normal = vec3(0,0,1);
    tm.depth = 1.0;
    tm.alpha = 1.0;
    tm.nextEntry = 0u;
    return tm;
}

float extractMaterialDepth(uint position) {
    uvec4 data = imageLoad(materialDataBuffer, int(position) );
    #if USE_UINT_PACKING
        return float(data.z) / 0xFFFFFFFF;
    #else
        return uintBitsToFloat(data.z);
    #endif    
}

void saveMaterialNextPointer(uint pointer, uint position) {
    uvec4 data = imageLoad(materialDataBuffer, int(position) );
    data.w = pointer;
    imageStore(materialDataBuffer, int(position), data);
}

uint extractMaterialNextPointer(uint position) {
    return imageLoad(materialDataBuffer, int(position)).w;
}

void renderTransparentMaterial(TransparentMaterial tm) {

    ivec2 coord = ivec2(gl_FragCoord.xy);

    tm.color = saturate(tm.color);
    tm.alpha = saturate(tm.alpha);
    tm.nextEntry = 0u;
    tm.materialType = clamp(tm.materialType, 0, 255);
    tm.normal = saturate(tm.normal * 0.5 + 0.5);
    tm.depth = saturate(tm.depth);


    // if (position >= 100000000) return;

    // Spinlock while editing the linked list
    bool done = false;

    uint locked = 0;
    int max_iter = 12;

    // Allocate buffer position
    uint position = imageAtomicAdd(pixelCountBuffer, ivec2(0, 0), 1) + 1;


    // Store material
    while(!done && max_iter --> 0)
    {
        locked = imageAtomicExchange(spinLockBuffer, coord, 1);
        if (locked == 0)
        {

            // Insert the material to the per pixel list
            uint listHead = imageLoad(listHeadBuffer, coord).x;

            // We are the first fragment
            if (listHead == 0u) {
                imageStore(listHeadBuffer, coord, uvec4(position) );
                tm.nextEntry = 0u;
                // tm.color = vec3(1,0,0);
            } else {


                // Insert sorted?
                // Warning; currently buggy
                #if 0

                int max_list_iter = 1000;
                // break;
                bool inserted = false;
                bool atHead = true;
                uint lastPointer = 0u;
                uint currentPointer = listHead;


                while(currentPointer != 0u && max_list_iter --> 0) {

                    float currentDepth = extractMaterialDepth(currentPointer);

                    // Insert node infront
                    if (currentDepth < tm.depth - 0.000001) {
                    // if (true) {

                        // Our node now points to the first object
                        tm.nextEntry = currentPointer;
                        inserted = true;

                        // Edit the pointer of the previous object
                        if (atHead) {
                            // Save new list head
                            imageStore(listHeadBuffer, coord, uvec4(position));
                            // tm.color = vec3(0,1,0);
                        } else {
                            saveMaterialNextPointer(position, lastPointer);
                            // tm.color = vec3(0,1,1);
                        }
    
                        currentPointer = 0u;

                    } else {
                        atHead = false;
                        lastPointer = currentPointer;
                        currentPointer = extractMaterialNextPointer(currentPointer);
                    }
                }

                // We are at the end of the list, so we are the last element
                if (!inserted && lastPointer != 0) {
                    saveMaterialNextPointer(position, lastPointer);
                    // tm.color = vec3(0,0,1);
                    tm.nextEntry = 0u;
                }

                #else

                tm.nextEntry = listHead;
                imageStore(listHeadBuffer, coord, uvec4(position));

                #endif

            }


            memoryBarrier();
            imageAtomicExchange(spinLockBuffer, coord, 0);
            done = true;
        }
    }


    // Pack material
    uint integer1 = int(tm.color.x * 250.0 + 0.5) | int(tm.color.y * 250.0 + 0.5) << 8 | int(tm.color.z * 250.0 + 0.5) << 16 | tm.materialType << 24;
    uint integer2 = int(tm.normal.x * 255.0) | int(tm.normal.y * 255.0) << 8 | int(tm.normal.z * 255.0) << 16 | int(tm.alpha * 255.0) << 24;

    #if USE_UINT_PACKING
        uint integer3 = uint(tm.depth * 0xFFFFFFFF);
    #else
        uint integer3 = floatBitsToUint(tm.depth);
    #endif

    uint integer4 = tm.nextEntry;



    // Store material
    imageStore(materialDataBuffer, int(position), uvec4(integer1, integer2, integer3, integer4));



    if (done) discard;
    // color0 = vec4(0.2,0.6,1.0,1);
}


TransparentMaterial unpackTransparentMaterial(uvec4 data) {

    TransparentMaterial tm;

    tm.nextEntry = data.w;

    #if USE_UINT_PACKING
        tm.depth = float(data.z) / 0xFFFFFFFF;
    #else
        tm.depth = uintBitsToFloat(data.z);
    #endif

    tm.color = vec3(
        float(data.x & 0xFF) / 255.0,
        float((data.x >> 8) & 0xFF) / 255.0,
        float((data.x >> 16) & 0xFF) / 255.0
    );

    tm.normal = vec3(
        float(data.y & 0xFF) / 255.0,
        float((data.y >> 8) & 0xFF) / 255.0,
        float((data.y >> 16) & 0xFF) / 255.0
    ) * 2.0 - 1.0;

    tm.alpha = float((data.y >> 24) & 0xFF) / 255.0;
    tm.materialType = (data.x >> 24) & 0xFF;
    return tm;
}