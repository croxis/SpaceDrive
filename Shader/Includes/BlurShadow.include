#pragma once
layout (local_size_x = 8, local_size_y = 8) in;

uniform layout(rgba32f) image2D target;
uniform sampler2D target_raw;

uniform ivec4 region;






void main() {

    float weights[15] = float[](     0.023089,
    0.034587,
    0.048689,
    0.064408,
    0.080066,
    0.093531,
    0.102673,
    0.105915,
    0.102673,
    0.093531,
    0.080066,
    0.064408,
    0.048689,
    0.034587,
    0.023089 );

    ivec2 texelCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 atlasCoords = texelCoords + region.xy;

    vec2 start_coord = vec2(region.xy) / SHADOW_MAP_ATLAS_SIZE;
    vec2 end_coord = vec2(region.xy + region.zw) / SHADOW_MAP_ATLAS_SIZE;
    vec2 current_coord = (vec2(texelCoords)+0.5) / SHADOW_MAP_ATLAS_SIZE + start_coord;

    float texelSize = 1.0 / SHADOW_MAP_ATLAS_SIZE;
    texelSize *= 0.5;

    vec4 sourceSample = texture(target_raw, current_coord);

    // vec4 sum = vec4(0.0);

    const int num_samples = 50;
    float result = 0.0;


    for (int i = -num_samples; i <= num_samples; i++) {
        vec4 source = textureLod(target_raw, clamp(current_coord + texelSize * float(i) * DIRECTION, start_coord, end_coord) , 0);

        float falloff = (1.0 - pow(float(abs(i)) / float(num_samples), 2.0)) * 4.5;
        falloff = 5.0;
        float penumbra_size = (sourceSample.x - source.x) * falloff;

        // result = max(penumbra_size, result);

        #if IS_LAST_BLUR_STEP
            result = max(result, source.z);
        #else
            result = max(penumbra_size, result);
        #endif



    }


    // barrier();

    #if IS_LAST_BLUR_STEP
        // result = sourceSample.z;
    #endif




    // vec4 sum = vec4(result);
    vec4 sum = vec4(result * 1.0);

    // sum = sourceSample;

    // sum += sourceSample * 0.204164;
    // sum += textureLod(target_raw, clamp(current_coord + vec2(pixel_papsize.y * 1.407333) * DIRECTION, start_coord, end_coord) , 0) * 0.304005;
    // sum += textureLod(target_raw, clamp(current_coord - vec2(pixel_size.y * 1.407333) * DIRECTION, start_coord, end_coord) , 0) * 0.304005;
    // sum += textureLod(target_raw, clamp(current_coord + vec2(pixel_size.y * 3.294215) * DIRECTION, start_coord, end_coord) , 0) * 0.093913;
    // sum += textureLod(target_raw, clamp(current_coord - vec2(pixel_size.y * 3.294215) * DIRECTION, start_coord, end_coord) , 0) * 0.093913;

    imageStore(target, atlasCoords, SOURCE_STORE);
    // imageStore(target, atlasCoords, sourceSample);


}