#pragma once

#pragma include "Includes/Configuration.include"
#pragma include "Includes/Structures/Material.struct"


uniform samplerCube fallbackCubemap;
uniform float fallbackCubemapMipmaps;

vec3 transformCubemapCoordinates(vec3 coord) {
    return normalize(coord.xzy * vec3(1,-1,1));
}



float computeMipmapFromRoughness(float roughness) {
    // return max(0.0, fallbackCubemapMipmaps + (log((roughness+0.21)/log(20))+0.52)*3.7);
    return max(0.0, fallbackCubemapMipmaps - 16 +  pow(roughness, 0.25) * 15.0);

    // return fallbackCubemapMipmaps - roughness * 11.0;
}

vec3 filterEnvironmentMap(samplerCube tex, Material material, vec3 direction, vec3 v) {

    float mipmap = computeMipmapFromRoughness(material.roughness);
    float mipSize = pow(2.0, fallbackCubemapMipmaps - mipmap);
    float blurRadius = 1.0 / mipSize;



    float antialiasingFactor = saturate(length(dFdx(direction)) + length(dFdy(direction)));
    // mipmap += antialiasingFactor * CUBEMAP_ANTIALIASING_FACTOR;

    return textureLod(tex, direction, mipmap).xyz;
}

vec3 computeAmbient(Material material, vec4 giAmbient, vec4 giSpecular, float occlusionFactor, vec3 v, vec3 n) {



    #if defined(DEBUG_DISABLE_AMBIENT) || defined(DEBUG_RM_PSSM_SPLITS) || defined(DEBUG_RM_SHADOWS)
        return vec3(0.0);
    #endif


    float NxV = max(0.0, dot(material.normal, v)) + 1e-5;

    vec3 reflectedDir = transformCubemapCoordinates(reflect( -v, material.normal ));
    vec3 ambientRefColor = filterEnvironmentMap(fallbackCubemap, material, reflectedDir, v);

    // ambientRefColor *= 2.0;


    // Add global illumination
    // ambientRefColor = giSpecular.xyz +  ambientRefColor * (1.0 - giSpecular.w);

    #if 0

        // Accurate lighting model

        // Create a fake light
        vec3 l = material.normal;
        vec3 h = normalize(l + v);

        // pre-computed cross products
        float NxL = saturate(dot(material.normal, l));
        float LxH = saturate(dot(l, h));

        float specularG = GeometricBRDF(material.roughness, NxV, NxL);
        vec3  specularF = FresnelBRDF(ambientRefColor, LxH);
        vec3 ambientReflected = specularG * specularF;
    
    #else
        // Fast lighting model
        vec3 ambientReflected = ambientRefColor;
    #endif


    vec3 result = vec3(0);

    occlusionFactor = pow(occlusionFactor, 2.0);
    // occlusionFactor = 1.0;

    // giAmbient.xyz = pow(giAmbient.xyz, vec3(2.0)) * 3.0 + 0.01;

//  * pow(giAmbient.w, 2.0)
    // Diffuse ambient
    

    // result += giAmbient.xyz * occlusionFactor * material.baseColor * saturate(1.0 - material.metallic) * (1.0 + material.normal.x * 0.1) * 5.0;
    result += giAmbient.xyz * occlusionFactor * material.baseColor * saturate(1.0 - material.metallic) * (1.0 + material.normal.x * 0.1) * 1.0 * saturate(1.0 + giAmbient.w) * 1.0;

    // float diffuseReflectFactor = pow( saturate(1.0 - dot(material.normal,v)), 2.0);

    // diffuseReflectFactor = 1.0;

    // result += diffuseReflectFactor * giSpecular.xyz * saturate(1.0 - material.metallic) * material.specular * saturate(1.0 - material.roughness) * 0.5;

    // Specular ambient
    // result += material.baseColor * ambientRefColor * (giSpecular.xyz) * 
    //           material.specular * (1.0 - material.roughness*0.7) * 
    //           max(0.0, material.metallic) *
    //           mix(pow(1.0 - saturate(dot(material.normal, v)), 5.0), 0.1, material.metallic) * 10.0;

    vec3 metallicSpecularAmbient = ambientReflected * occlusionFactor * material.baseColor * material.specular * 1.0;

    // Make metallic materials darker at the border
    // metallicSpecularAmbient *= saturate(1.0 - pow( saturate(1.0 - NxV), 2.0));

    result += metallicSpecularAmbient * material.metallic;


    // result = pow(giAmbient.xyz, vec3(3.0)) + 0.1;
    // result *= giAmbient.w + 0.2;

    return result;
}