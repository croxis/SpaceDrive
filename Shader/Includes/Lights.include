
#include "Includes/Configuration.include"


vec3 applyPointLight(Light light, Material material 
    OCCLUSION_PER_LIGHT_RECV_PARAMETERS ) {

    float distanceToLight = distance(material.position, light.position);   
    float distanceRelative = distanceToLight / light.radius; 
    float attenuation = computePointLightAttenuation(light, distanceToLight);

    vec3  l = normalize(light.position - material.position);
    vec3  v = normalize(cameraPosition - material.position);
    vec3  n = normalize(material.normal);
    vec3  h = normalize(l + v);
    vec3 ambientContribution = 0.1 * material.baseColor * light.ambient * attenuation;

    APPLY_OCCLUSION();

    return computeLightModel(light, material, l,v, n, h, attenuation, 1.0);
}

vec3 applyPointLightWithShadow(Light light, Material material
    OCCLUSION_PER_LIGHT_RECV_PARAMETERS ) {

    float distanceToLight = distance(material.position, light.position);   
    float distanceRelative = distanceToLight / light.radius; 
    float attenuation = computePointLightAttenuation(light, distanceToLight);

    vec3  l = normalize(light.position - material.position);
    vec3  v = normalize(cameraPosition - material.position);
    vec3  n = normalize(material.normal);
    vec3  h = normalize(l + v);

    APPLY_OCCLUSION();

    // We decide which shadow map to sample using a simple lookup cubemap
    int faceIndex = int( textureLod(directionToFace, l, 0).r * 5.0);
    int shadowSourceIndex = light.sourceIndexes[faceIndex];

    ShadowSource currentSource = shadowSources[shadowSourceIndex]; 

    float shadowFactor = computeShadowsForSource(currentSource, material, n, l, 1.0, 1.0, 0.0002);
    return computeLightModel(light, material, l, v, n, h, attenuation, shadowFactor);
}


vec3 applyDirectionalLight(Light light, Material material
    OCCLUSION_PER_LIGHT_RECV_PARAMETERS ) {

    float distanceToLight = distance(material.position, light.position);   
    float distanceRelative = distanceToLight / light.radius; 
    float attenuation = 1.0;

    vec3  l = light.direction;
    vec3  v = normalize(cameraPosition - material.position);
    vec3  n = normalize(material.normal);
    vec3  h = normalize(l + v);

    APPLY_OCCLUSION();

    vec3 ambientContribution = 0.1 * material.baseColor * light.ambient * attenuation;
    return computeLightModel(light, material, l, v, n, h, attenuation, 1.0);
}

vec3 applyDirectionalLightWithShadow(Light light, Material material 
    OCCLUSION_PER_LIGHT_RECV_PARAMETERS ) {


    float distanceToLight = distance(material.position, light.position);   
    float distanceRelative = distanceToLight / light.radius; 
    float attenuation = 1.0;

    vec3  l = light.direction;
    vec3  v = normalize(cameraPosition - material.position);
    vec3  n = normalize(material.normal);
    vec3  h = normalize(l + v);

    APPLY_OCCLUSION();

    int shadowSourceIndex = light.sourceIndexes[0];
    ShadowSource currentSource = shadowSources[shadowSourceIndex]; 
    float shadowFactor = computeShadowsForSource(currentSource, material, n, l, 0.0, 0.005, 0.000000);
    vec3 rawLighting = computeLightModel(light, material, l, v, n, h, attenuation, shadowFactor);
    return rawLighting;
}

