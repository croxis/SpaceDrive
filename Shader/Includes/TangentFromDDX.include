

#include "Includes/VertexOutput.include"

// Reconstructs the tangent with the deltas of 
// the position and texcoord
void reconstructTanBin(out vec3 tangent, out vec3 binormal) {

    vec3 Q1 = dFdx(vOutput.positionWorld);
    vec3 Q2 = dFdy(vOutput.positionWorld);
    vec2 st1 = dFdx(vOutput.texcoord);
    vec2 st2 = dFdy(vOutput.texcoord);
 
    tangent = normalize(Q1*st2.t - Q2*st1.t);
    binormal = normalize(cross(tangent, vOutput.normalWorld));
    // binormal = normalize(-Q1*st2.s + Q2*st1.s);


    // http://stackoverflow.com/questions/5255806/how-to-calculate-tangent-and-binormal

    // // compute derivations of the world position
    // vec3 p_dx = dFdx(vOutput.positionWorld);
    // vec3 p_dy = dFdy(vOutput.positionWorld);

    // // compute derivations of the texture coordinate
    // vec2 tc_dx = dFdx(vOutput.texcoord);
    // vec2 tc_dy = dFdy(vOutput.texcoord);

    // // compute initial tangent and bi-tangent
    // vec3 t = normalize( tc_dy.y * p_dx - tc_dx.y * p_dy );
    // vec3 b = normalize( tc_dy.x * p_dx - tc_dx.x * p_dy ); // sign inversion

    // // get new tangent from a given mesh normal
    // vec3 n = normalize(vOutput.normalWorld);
    // vec3 x = cross(n, t);
    // t = cross(x, n);
    // t = normalize(t);
    // // get updated bi-tangent
    // x = cross(b, n);
    // b = cross(n, x);
    // b = normalize(b);

    // tangent = t;
    // binormal = cross(tangent, vOutput.normalWorld);


}