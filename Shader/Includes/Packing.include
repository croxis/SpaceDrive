

#include "Includes/Configuration.include"

// http://aras-p.info/texts/CompactNormalStorage.html
// Packs a normal to a vec2
const float npScale = 1.7777;

vec2 encodeNormal(vec3 n)
{   
    // return n.xy;
    // n = normalize(n);
    // n.x += 0.01;

    vec2 enc = n.xy / (n.z+1.0);
    enc /= npScale;
    return enc*0.5 + 0.5;
}

// Unpacks a normal from a vec2
vec3 decodeNormal(vec2 encoded)
{
    // return vec3(encoded.xy,0);
    vec3 nn =
        vec3(encoded.xy, 0)*vec3(2*npScale,2*npScale,0) +
        vec3(-npScale,-npScale,1);
    float g = 2.0 / dot(nn.xyz,nn.xyz);
    vec3 n;
    n.xy = g*nn.xy;
    n.z = g-1.0;
    return n;
}

const mat3 rgbToYCbCr = mat3(
    0.299, -0.168736, 0.5,
    0.587, -0.331264, -0.418688, 
    0.144, 0.5, -0.081312
);

#ifndef NO_EXTENDED_PACKING

// IEEE 754 half-precision binary floating-point format
// http://en.wikipedia.org/wiki/Half-precision_floating-point_format
const float pYmin = -14.0;
const float pYmax = 15.0;
const float pYspan = 29;
const float pYbias = 0.5;
const float pYscale = 4.0;

const float pQscale = 0.45;
const float pQbias = 0.75;

vec2 packColor(vec3 color) {
    color = saturate(color);

    vec3 yiq = rgbToYCbCr * color;
    
    // Pack I
    int exponent = int(mix(pYmin, pYmax, saturate(yiq.y * pYscale + pYbias ) ));

    // Pack Q
    float significand =  yiq.z*pQscale + pQbias;

    
    float pack = ldexp(significand, exponent);
    return vec2( yiq.x, pack);
}

vec3 unpackColor(vec2 pack) {



    int exponent = 0;
    float significand = frexp(pack.y, exponent);

    // todo: MAD
    float i = float(exponent - pYmin) / pYspan;
    float q = ( significand - pQbias) / pQscale;

    i = (i - pYbias) / pYscale;
    vec3 yiq = vec3(pack.x,i,q);
    vec3 rgb = inverse(rgbToYCbCr) * yiq;
    
    float test = pack.x * pQscale + pQbias;

// 

    // return test > 0.51 ? ( test < 0.99 ? vec3(0,1,0) : vec3(1,0,0)) : vec3(0,0,1);

    // return vec3( abs(pack.x - i));

    // return vec3(abs(i));

    return rgb;
}

#endif