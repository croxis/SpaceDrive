#pragma once

#pragma include "Includes/Configuration.include"
#pragma include "Includes/Light.include"
#pragma include "Includes/Random.include"
#pragma include "Includes/LightingModels.include"
#pragma include "Includes/Material.include"
#pragma include "Includes/ParabolicTransform.include"
#pragma include "Includes/ShadowSource.include"
#pragma include "Includes/PositionReconstruction.include"
#pragma include "Includes/PoissonDisk.include"
#pragma include "Includes/SphericalHarmonics.include"






vec3 computeSpecular(vec3 specularColor, float roughness, float NxL, float LxH, float NxV, float NxH) {
    float specularD = DistributionBRDF(roughness, NxH);
    float specularG = GeometricBRDF(roughness, NxV, NxL);
    vec3  specularF = FresnelBRDF(specularColor, LxH);
    return (specularD * specularG) * specularF;
}


vec3 computeLightModel(Light light, Material material, 
        vec3 l, vec3 v, vec3 n, vec3 h, 
        float attenuation, float shadowFactor) {

    #if DEBUG_RM_SHADOWS
        return shadowFactor * attenuation * light.color;
    #endif

    #if DEBUG_DISABLE_COMPLEX_LIGHTING
        return light.color * attenuation * material.baseColor * shadowFactor;
    #else

    // Performance optimization
    // if (shadowFactor < 0.001) return vec3(0.0);

    vec3 lightingResult = vec3(0);
    vec3 specularColor = mix(vec3(1), material.baseColor, material.metallic) * material.specular;

    specularColor = light.color;

    vec3 diffuseColor = mix(material.baseColor, vec3(0), material.metallic);

    float roughness = clamp(material.roughness, 0.005, 1.0);

    // pre-computed cross products
    float NxL = saturate(dot(n, l));
    float LxH = saturate(dot(l, h));
    float NxV = abs(dot(n, v)) + 1e-5;
    float NxH = saturate(dot(n, h));

    // Evaluate specular
    vec3 specularContribution = computeSpecular(specularColor, roughness, NxL, LxH, NxV, NxH) * NxL;

    // Energy conservation
    lightingResult += specularContribution * material.baseColor;

    // Evaluate diffuse
    vec3 diffuseContribution = diffuseColor * NxL * light.color;
    lightingResult += diffuseContribution;

    // Apply shadows
    lightingResult *= shadowFactor;

    // Apply point light attenuation
    lightingResult *= attenuation;

    return lightingResult;

    #endif

}


float computePointLightAttenuation(Light light, float d) {

    // return 1.0;
    float r = light.radius;

    // https://imdoingitwrong.wordpress.com/2011/01/31/light-attenuation/
    // Inverse falloff
    float attenuation = 1.0 / (1.0 + 2*d/r + (d*d)/(r*r)); 

    // Hard transition
    // return d < light.radius ? 1.0 : 0.0;

    // Linear transition
    // return saturate(1.0 - d / light.radius);

    // return attenuation;
    // Cut light transition starting at 80% because the curve is exponential and never really gets 0
    float cutoff = light.radius * 0.7;
    attenuation *= 1.0 - saturate((d / cutoff) - 1.0) * (0.7 / 0.3);


    // attenuation *= 1.0 - smoothstep(0.0, 1.0, ((d / cutoff) - 1.0) * 4.0 );   
    attenuation = max(0.0, attenuation);
    return attenuation;
}


#pragma include "Includes/Lights.include" 


