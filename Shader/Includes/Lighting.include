#pragma once

#pragma include "Includes/Configuration.include"
#pragma include "Includes/Light.include"
#pragma include "Includes/Random.include"
#pragma include "Includes/LightingModels.include"
#pragma include "Includes/Material.include"
#pragma include "Includes/ParabolicTransform.include"
#pragma include "Includes/ShadowSource.include"
#pragma include "Includes/PositionReconstruction.include"
#pragma include "Includes/PoissonDisk.include"
#pragma include "Includes/SphericalHarmonics.include"


uniform samplerCube directionToFace;
uniform samplerCube fallbackCubemap;
uniform float fallbackCubemapMipmaps;


#if USE_HARDWARE_PCF
uniform sampler2DShadow shadowAtlasPCF;
#endif

uniform sampler2D shadowAtlas;



vec2 convertAtlasCoord(vec2 rawCoord, ShadowSource source) {
    return clamp(rawCoord, 0, 1) * (float(source.resolution) / SHADOW_MAP_ATLAS_SIZE) + source.atlasPos;
}


vec3 computeSpecular(vec3 specularColor, float roughness, float NxL, float LxH, float NxV, float NxH) {
    float specularD = DistributionBRDF(roughness, NxH);
    float specularG = GeometricBRDF(roughness, NxV, NxL);
    vec3  specularF = FresnelBRDF(specularColor, LxH);
    return (specularD * specularG) * specularF;
}

float computeMipmapFromRoughness(float roughness) {
    // return max(0.0, fallbackCubemapMipmaps + (log((roughness+0.21)/log(20))+0.52)*3.7);
    return max(0.0, fallbackCubemapMipmaps - 12 +  pow(roughness, 0.25) * 11.0);

    // return fallbackCubemapMipmaps - roughness * 11.0;
}


vec3 computeLightModel(Light light, Material material, 
        vec3 l, vec3 v, vec3 n, vec3 h, 
        float attenuation, float shadowFactor) {

    #if DEBUG_RM_SHADOWS
        return shadowFactor * attenuation * light.color * 0.05;
    #endif

    #if USE_SIMPLE_LIGHTING || DEBUG_DISABLE_COMPLEX_LIGHTING
        return light.color * attenuation * shadowFactor * material.baseColor * shadowFactor;
    #else

        // Performance optimization
        // if (shadowFactor < 0.001) return vec3(0.0);

        vec3 lightingResult = vec3(0);
        vec3 specularColor = mix(vec3(1), material.baseColor, material.metallic) * material.specular;

        specularColor = light.color;

        vec3 diffuseColor = mix(material.baseColor, vec3(0), material.metallic);

        float roughness = clamp(material.roughness, 0.005, 1.0);

        // pre-computed cross products
        float NxL = saturate(dot(n, l));
        float LxH = saturate(dot(l, h));
        float NxV = abs(dot(n, v)) + 1e-5;
        float NxH = saturate(dot(n, h));

        // Evaluate specular
        vec3 specularContribution = computeSpecular(specularColor, roughness, NxL, LxH, NxV, NxH) * NxL;

        // Energy conservation
        lightingResult += specularContribution * material.baseColor;

        // Evaluate diffuse
        vec3 diffuseContribution = diffuseColor * NxL * light.color;
        lightingResult += diffuseContribution;

        // Apply shadows
        lightingResult *= shadowFactor;

        // Apply point light attenuation
        lightingResult *= attenuation;

        return lightingResult;

    #endif

}

vec3 transformCubemapCoordinates(vec3 coord) {
    return normalize(coord.xzy * vec3(1,-1,1));
}

vec3 filterEnvironmentMap(samplerCube tex, Material material, vec3 direction, vec3 v) {

    float mipmap = computeMipmapFromRoughness(material.roughness);
    float mipSize = pow(2.0, fallbackCubemapMipmaps - mipmap);
    float blurRadius = 1.0 / mipSize;


    float antialiasingFactor = saturate(length(dFdx(direction)) + length(dFdy(direction)));
    mipmap += antialiasingFactor * CUBEMAP_ANTIALIASING_FACTOR * 2.0;

    vec3 samples = vec3(0);

    #ifndef DEBUG_DISABLE_FILTER_ENVIRONMENT

        for ( int i = 0; i < 32; ++i )
        {
            vec3 sampledDir = direction + poisson3D_32[i] * blurRadius;
            samples += textureLod(tex, sampledDir, mipmap).xyz;
        }

        samples /= 32.0;

    #else
        samples = textureLod(tex, direction, mipmap).rgb;
    #endif


    // return textureLod(tex, direction, mipmap).xyz;
    return samples;


}

vec3 computeAmbient(Material material, vec4 giAmbient, vec4 giSpecular, vec3 v, vec3 n) {

    #ifdef DEBUG_DISABLE_AMBIENT
        return vec3(0.0);
    #endif

    #ifdef DEBUG_RM_SHADOWS
        return vec3(0.1);
    #endif

    float NxV = max(0.0, dot(material.normal, v)) + 1e-5;

    vec3 reflectedDir = transformCubemapCoordinates(reflect( -v, material.normal ));
    vec3 ambientRefColor = filterEnvironmentMap(fallbackCubemap, material, reflectedDir, v);

    ambientRefColor *= 2.0;


    // Add global illumination
    ambientRefColor = giSpecular.xyz +  ambientRefColor * (1.0 - giSpecular.w);

    #if 0

        // Accurate lighting model

        // Create a fake light
        vec3 l = material.normal;
        vec3 h = normalize(l + v);

        // pre-computed cross products
        float NxL = saturate(dot(material.normal, l));
        float LxH = saturate(dot(l, h));

        float specularG = GeometricBRDF(material.roughness, NxV, NxL);
        vec3  specularF = FresnelBRDF(ambientRefColor, LxH);
        vec3 ambientReflected = specularG * specularF;
    
    #else
        // Fast lighting model
        vec3 ambientReflected = ambientRefColor;
    #endif




    vec3 result = vec3(0);


    // Diffuse ambient
    result += giAmbient.xyz * pow(giAmbient.w, 2.0) * material.baseColor * saturate(1.0 - material.metallic) * 1.0;


    // float diffuseReflectFactor = pow( saturate(1.0 - dot(material.normal,v)), 2.0);

    // diffuseReflectFactor = 1.0;

    // result += diffuseReflectFactor * giSpecular.xyz * saturate(1.0 - material.metallic) * material.specular * saturate(1.0 - material.roughness) * 0.5;

    // Specular ambient
    // result += material.baseColor * ambientRefColor * (giSpecular.xyz) * 
    //           material.specular * (1.0 - material.roughness*0.7) * 
    //           max(0.0, material.metallic) *
    //           mix(pow(1.0 - saturate(dot(material.normal, v)), 5.0), 0.1, material.metallic) * 10.0;


    vec3 metallicSpecularAmbient = ambientReflected * material.baseColor * material.specular;

    // Make metallic materials darker at the border
    // metallicSpecularAmbient *= saturate(1.0 - pow( saturate(1.0 - NxV), 2.0));

    result += metallicSpecularAmbient * material.metallic;



    return result;
}

float computePointLightAttenuation(Light light, float distanceToLight) {

    // Hard transition
    // return distanceToLight < light.radius ? 1.0 : 0.0;

    // Soft transition
    float attenuation = pow(1.0 + (distanceToLight / light.radius) , -2.0);

    // Inverse falloff
    // float attenuation = pow(saturate(1.0 - pow(distanceToLight / light.radius, 4.0)), 2.0) / (pow(distanceToLight, 2.0) + 1);


    // Cut light transition starting at 80% because the curve is exponential and never gets really 0
    float cutoff = light.radius * 0.8;
    attenuation *= 1.0 - smoothstep(0.0, 1.0, ( (distanceToLight / cutoff) - 1.0) * 4.0 );   
    attenuation = max(0.0, attenuation);
    return attenuation;
}


// http://the-witness.net/news/2013/09/shadow-mapping-summary-part-1/
// Apply a bias to the shadowmaps
vec2 getShadowOffsets(vec3 N, vec3 L) {
    float cos_alpha = saturate(dot(N, L));
    float offset_scale_N = sqrt(1 - cos_alpha*cos_alpha); // sin(acos(L·N))
    float offset_scale_L = offset_scale_N / cos_alpha;    // tan(acos(L·N))
    return vec2(offset_scale_N, min(2, offset_scale_L));
}

vec3 reprojectShadow(ShadowSource source, vec3 pos) {
    vec4 projected = source.mvp * vec4(pos, 1);
    return (projected.xyz / projected.w * 0.5) + 0.5;
}

vec3 computeBiasedPosition(Material material, float slopeBias, float normalBias, vec3 l, vec3 n) {

    // return material.position;

    vec3 biasedPos = material.position;
    float baseShift = 1.0;
    vec2 offsets = getShadowOffsets(n, l);
    biasedPos += baseShift * l * offsets.x * slopeBias;
    biasedPos += baseShift * n * offsets.y * normalBias; 
    return biasedPos;
}


bool coord_inside(vec2 coord, vec2 min_coord, vec2 max_coord) {
    return all(greaterThan(coord, min_coord)) && all(lessThan(coord, max_coord));
}


float pcssKernel(ShadowSource source, vec3 projCoord, float baseBias, vec2 projSize) {
    #ifndef DEBUG_DISABLE_PCSS

    vec2 centerCoord = convertAtlasCoord(projCoord.xy, source);
   
    vec2 searchRegionRadiusUV = PCSS_SEARCH_RADIUS * projSize;

    float blockerSum = 0.0;
    float numBlockers = 0.0;
    float biasedDepth = projCoord.z - baseBias;


    #undef SHADOW_NUM_PCSS_SEARCH_SAMPLES
    #define SHADOW_NUM_PCSS_SEARCH_SAMPLES 64

    // Find blocker
    for ( int i = 0; i < SHADOW_NUM_PCSS_SEARCH_SAMPLES; ++i )
    {
        vec2 offset = poissonDisk64[i] * searchRegionRadiusUV;
        float shadowMapDepth = textureLod(shadowAtlas, centerCoord + offset , 0).x;
        float factor = step(shadowMapDepth, biasedDepth);
        numBlockers += factor;
        blockerSum += shadowMapDepth * factor;
    }

    float avgBlockerDepth = blockerSum / numBlockers;
    float penumbraSize = abs(biasedDepth - avgBlockerDepth) / biasedDepth * 20.0;


    // return float(numBlockers) / SHADOW_NUM_PCSS_SEARCH_SAMPLES;

    if (numBlockers < 0.5) return 1.0;

    // penumbraSize = min(max(penumbraSize, 0.01), 1.0);

    vec2 filterRadiusUV = penumbraSize * PCSS_FILTER_RADIUS * projSize;

    // PCF Filter
    float sum = 0.0;

    #if USE_PIXEL_BASED_PCSS
        int pixelOffset = (int(gl_FragCoord.x) * int(gl_FragCoord.y)) % 2;
    #else
        int pixelOffset = 0;
    #endif

    for ( int i = 0; i < SHADOW_NUM_PCSS_FILTER_SAMPLES; ++i )
    {
        vec2 offset = poissonDisk64[i] * filterRadiusUV;
        
        #if USE_HARDWARE_PCF
            // Notice: Maybe use .x? My gtx 670 does not like that though
            sum += 1.0 - textureLod(shadowAtlasPCF, vec3(centerCoord + offset + pixelOffset * offset * 0.1, biasedDepth) , 0);
        
        #else
            float sampled = textureLod(shadowAtlas, centerCoord + offset , 0).x;
            sum += step(sampled, biasedDepth);        
        #endif

    }
    sum /= SHADOW_NUM_PCSS_FILTER_SAMPLES;


    // Avoid banding
    // sum = pow(sum, 2.0);

    
    // return 1.0 - saturate(pow(sum, 2.0));
    return 1.0 - saturate(sum);

    #else

        vec2 centerCoord = convertAtlasCoord(projCoord.xy, source);
        float biasedDepth = projCoord.z - baseBias;
        float sampled = textureLod(shadowAtlas, centerCoord, 0).x;
        return 1.0 - step(sampled, biasedDepth);


    #endif
}


float pcfKernel(ShadowSource source, vec3 projCoord, float baseBias, vec2 projSize) {

    #ifndef DEBUG_DISABLE_PCF

    vec2 centerCoord = convertAtlasCoord(projCoord.xy, source);
    float biasedDepth = projCoord.z - baseBias;
    vec2 filterRadiusUV = 5.0 * projSize;

    // PCF Filter
    float sum = 0.0;

    for ( int i = 0; i < SHADOW_NUM_PCF_SAMPLES; ++i )
    {
        vec2 offset = poissonDisk64[i] * filterRadiusUV;
        
        #if USE_HARDWARE_PCF
            // Notice: Maybe use .x? My gtx 670 does not like that though
            sum += 1.0 - textureLod(shadowAtlasPCF, vec3(centerCoord + offset, biasedDepth) , 0);
        
        #else
            float sampled = textureLod(shadowAtlas, centerCoord + offset , 0).x;
            sum += step(sampled, biasedDepth);        
        #endif
    }

    sum /= SHADOW_NUM_PCF_SAMPLES;
    return 1.0 - saturate(sum);

    #else

        vec2 centerCoord = convertAtlasCoord(projCoord.xy, source);
        float biasedDepth = projCoord.z - baseBias;
        float sampled = textureLod(shadowAtlas, centerCoord, 0).x;
        return 1.0 - step(sampled, biasedDepth);

    #endif
}


float pcssKernelDynamicSize(Light light, ShadowSource source, vec3 projCoord, float baseBias) {
    #ifndef DEBUG_DISABLE_PCSS
        // Project 2 points on the xy plane to find out the filter radius in shadowmap space.
        // This ensures the correct filtering radius for split shadow sources
        vec3 point1 = vec3(0,0,0);
        vec3 point2 = normalize(cross(vec3(0, 0, 1), light.direction));
        point2 *= PCSS_RADIUS_WS;

        vec3 proj1 = reprojectShadow(source, point1);
        vec3 proj2 = reprojectShadow(source, point2);

        // The filter size is the difference of both lightspace pixels
        vec2 projSize = abs(proj1.xy - proj2.xy);

        return pcssKernel(source, projCoord, baseBias, projSize);
    #else
        return pcssKernel(source, projCoord, baseBias, vec2(1));
    #endif
}


float computeShadowsForSource(ShadowSource source, Material material, vec3 n, vec3 l, 
    float slopeScaledBias, float normalScaledBias, float baseBias) {

    #ifdef DEBUG_DISABLE_SHADOWS
        return 1.0;
    #endif

    vec3 biasedPos = computeBiasedPosition(material, slopeScaledBias, normalScaledBias, n, l);
    vec3 projCoord = reprojectShadow(source, biasedPos);

    float pixScaled = 2.0 / float(source.resolution);

    if (any(lessThan(projCoord.xy, vec2(pixScaled))) || any(greaterThan(projCoord.xy, vec2(1-pixScaled)))) {
        return 1.0;
    }

    // return pcssKernel(source, projCoord, baseBias, vec2(0.5 / SHADOW_MAP_ATLAS_SIZE) );
    return pcfKernel(source, projCoord, baseBias, vec2(0.5 / SHADOW_MAP_ATLAS_SIZE) );
}

float computePSSMShadowsForLight(Light light, Material material, vec3 n, vec3 l, 
    float slopeScaledBias, float normalScaledBias, float baseBias, out int map_used) {

    map_used = 0;
    #ifdef DEBUG_DISABLE_SHADOWS
        return 1.0;
    #endif


    int shadow_map_index = 4;
    vec3 projCoord = vec3(0);

    for (int i = 0; i < 4; i++) {
        int sourceIndex = light.sourceIndexes[i];
        ShadowSource source = shadowSources[sourceIndex];
        projCoord = reprojectShadow(source, material.position);

        // Border
        float pixScaled = SHADOW_PSSM_BORDER_PERCENTAGE;

        if (all(greaterThan(projCoord.xy, vec2(pixScaled))) && all(lessThan(projCoord.xy, vec2(1-pixScaled)))) {
            // Source can be used
            shadow_map_index = i;
            break;
        }
    }

    if (shadow_map_index > 3) return 1.0;

    ShadowSource source = shadowSources[light.sourceIndexes[shadow_map_index]];
    float resolutionFactor = 1.0 / source.resolution;

    vec2 centerCoord = convertAtlasCoord(projCoord.xy, source);
    vec3 biasedPos = computeBiasedPosition(material, slopeScaledBias * resolutionFactor, normalScaledBias * resolutionFactor, n, l);
    projCoord = reprojectShadow(source, biasedPos);
    map_used = shadow_map_index;
    baseBias *= resolutionFactor;

    #if USE_PCSS
        return pcssKernelDynamicSize(light, source, projCoord, baseBias);
    #else
        return pcfKernel(source, projCoord, baseBias * 2.0, vec2(0.5 / SHADOW_MAP_ATLAS_SIZE));
    #endif
}

#pragma include "Includes/Lights.include" 
