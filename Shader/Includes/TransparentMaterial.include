




#define USE_UINT_PACKING 0

struct TransparentMaterial {
    vec3 color;
    uint materialType;
    vec3  normal;
    float alpha;
    float depth;
    uint nextEntry;
};

TransparentMaterial getDefaultTransparentMaterial() {
    TransparentMaterial tm;
    tm.color = vec3(1);
    tm.materialType = 0;
    tm.normal = vec3(0,0,1);
    tm.depth = 1.0;
    tm.alpha = 1.0;
    tm.nextEntry = 0u;
    return tm;
}



TransparentMaterial unpackTransparentMaterial(uvec4 data) {

    TransparentMaterial tm;

    tm.nextEntry = data.w;


    vec4 unpacked1 = unpackUnorm4x8(data.x);
    vec4 unpacked2 = unpackUnorm4x8(data.y);

    tm.color = unpacked1.rgb;
    tm.materialType = uint(unpacked1.w);
    tm.normal = unpacked2.rgb * 2.0 - 1.0;
    tm.alpha = unpacked2.w;

    #if USE_UINT_PACKING
        tm.depth = float(data.z) / 0xFFFFFFFF;
    #else
        tm.depth = uintBitsToFloat(data.z);
    #endif
    return tm;
}



float extractMaterialDepth(uvec4 data) {

    #if USE_UINT_PACKING
        return float(data.z) / 0xFFFFFFFF;
    #else
        return uintBitsToFloat(data.z);
    #endif    
}



// uint extractMaterialNextPointer(uint position) {
//     return imageLoad(materialDataBuffer, int(position)).w;
// }
