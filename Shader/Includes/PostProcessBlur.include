#pragma once


#pragma include "Includes/Configuration.include"
#pragma include "Includes/Packing.include"


const float normalsDiscardThreshold = 0.996;
const float normalsDiscardThresholdShadows = 0.99;
// const float normalsDiscardThreshold = 0.2;


uniform sampler2D normalsView;


vec4 mipmapBasedBlur(vec2 texcoord, vec2 direction, sampler2D colorTex, sampler2D blurFactors) {

    // return texture(colorTex, texcoord);

    float blurFactor = texture(blurFactors, texcoord).r;

    if (blurFactor < 0.01) {
        return texture(colorTex, texcoord);
    } else {

        float blurWeights[9] = float[9]
        (
            0.013519569015984728,
            0.047662179108871855,
            0.11723004402070096,
            0.20116755999375591,
            0.240841295721373,
            0.20116755999375591,
            0.11723004402070096,
            0.047662179108871855,
            0.013519569015984728
        );

        float offsets[9] = float[9] (-4,-3,-2,-1,0,+1,+2,+3,+4);

        float mipmap = blurFactor * 2.2;
        mipmap = 0.0;
        vec2 texelSize = 7.2 / vec2(textureSize(colorTex, 0));
        texelSize *= direction * blurFactor;
        vec4 result = vec4(0);
        float weights;
        for (int i = 0; i < 9; i++) {
            vec2 offsetCoord = texcoord + offsets[i]*texelSize;
            float dofFactorOffset = textureLod(blurFactors, offsetCoord, 0).r;
            float weight = max(0.0, dofFactorOffset - blurFactor) *  blurWeights[i];
            weight = 1.0;

            result += textureLod(colorTex, offsetCoord , mipmap) *weight;
            weights += weight;
        }
        return result / weights;
    }
}



vec4 edgePreservingBlur(vec2 texcoord, ivec2 screenCoord, sampler2D sourceTex, sampler2D normalTex) {

    #ifdef DEBUG_DISABLE_UPSCALE_BLUR
        return texture(sourceTex, texcoord);
    #else



        #define NUM_BLUR_STEPS 17

        // int(NUM_BLUR_STEPS / 2)
        #define NUM_BLUR_MID 9
        #define PIXEL_TO_MID_FACTOR 10.0

        // http://dev.theomader.com/gaussian-kernel-calculator/
        float blurWeights[NUM_BLUR_STEPS] = float[NUM_BLUR_STEPS]
        (
            0.003924,
            0.008962,
            0.018331,
            0.033585,
            0.055119,
            0.081029,
            0.106701,
            0.125858,
            0.132980,
            0.125858,
            0.106701,
            0.081029,
            0.055119,
            0.033585,
            0.018331,
            0.008962,
            0.003924
        );

        vec3 normals[NUM_BLUR_STEPS];
        vec4 samples[NUM_BLUR_STEPS];

        vec2 offset = texcoord;
        vec2 texelSize = 1.0 / vec2(textureSize(sourceTex, 0));
        vec2 perStep = texelSize * vec2(blurDirection);
        offset -= perStep * PIXEL_TO_MID_FACTOR;

        for (int i = 0; i < NUM_BLUR_STEPS; i++) {
            offset += perStep;
            normals[i] = texture(normalTex, offset).xyz;
            samples[i] = texture(sourceTex, offset);
        }


        // pixel normal is the mid normal
        vec3 normal = normals[NUM_BLUR_MID];

        vec4 sampledResult = vec4(0.0);
        float sampleWeights = 0.0;

        // Check for edges, as we are performing an edge preserving blur
        for (int i = 0; i < NUM_BLUR_STEPS; i++) {
            float weight = blurWeights[i];
            float normalInfluenceFactor = step(normalsDiscardThreshold, dot(normals[i], normal)) * weight;
            sampledResult += samples[i]*normalInfluenceFactor;
            sampleWeights += normalInfluenceFactor;   
        }

        return sampledResult / sampleWeights;

    #endif
}

vec4 edgePreservingShadowBlur(vec2 texcoord, ivec2 screenCoord, sampler2D sourceTex, sampler2D normalTex) {

    #ifdef DEBUG_DISABLE_UPSCALE_BLUR
        return texture(sourceTex, texcoord);
    #else



        #define NUM_BLUR_STEPS 17

        // int(NUM_BLUR_STEPS / 2)
        #define NUM_BLUR_MID 9
        #define PIXEL_TO_MID_FACTOR 10.0

        // http://dev.theomader.com/gaussian-kernel-calculator/
        float blurWeights[NUM_BLUR_STEPS] = float[NUM_BLUR_STEPS]
        (
            0.003924,
            0.008962,
            0.018331,
            0.033585,
            0.055119,
            0.081029,
            0.106701,
            0.125858,
            0.132980,
            0.125858,
            0.106701,
            0.081029,
            0.055119,
            0.033585,
            0.018331,
            0.008962,
            0.003924
        );

        vec3 normals[NUM_BLUR_STEPS];
        vec4 samples[NUM_BLUR_STEPS];

        vec2 offset = texcoord;
        vec2 texelSize = 1.0 / vec2(textureSize(sourceTex, 0));
        vec2 perStep = texelSize * vec2(blurDirection);
        offset -= perStep * PIXEL_TO_MID_FACTOR;

        for (int i = 0; i < NUM_BLUR_STEPS; i++) {
            offset += perStep;
            normals[i] = texture(normalTex, offset).xyz;
            samples[i] = texture(sourceTex, offset);
        }


        // pixel normal is the mid normal
        vec3 normal = normals[NUM_BLUR_MID];

        vec4 sampledResult = vec4(0.0);
        float sampleWeights = 0.0;

        // Check for edges, as we are performing an edge preserving blur
        for (int i = 0; i < NUM_BLUR_STEPS; i++) {
            float weight = blurWeights[i];
            float normalInfluenceFactor = step(normalsDiscardThresholdShadows, dot(normals[i], normal)) * weight;
            sampledResult += samples[i]*normalInfluenceFactor;
            sampleWeights += normalInfluenceFactor;   
        }

        return sampledResult / sampleWeights;

    #endif
}


