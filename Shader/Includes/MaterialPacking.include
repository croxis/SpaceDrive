#pragma once

#pragma include "Includes/Configuration.include"
#pragma include "Includes/Material.include"
#pragma include "Includes/Packing.include"

uniform mat4 lastMVP;

layout(location=0) out vec4 color0;
layout(location=1) out vec4 color1;
layout(location=2) out vec4 color2;
layout(location=3) out vec4 color3;

void renderMaterial(Material m) {

    // Pack values
    // vec2 normal = encodeNormal(m.normal);
    vec3 normal = normalize(m.normal);
    // vec2 color = packColor( m.baseColor );
    vec3 color = m.baseColor.rgb;

    #ifndef DO_NOT_COMPUTE_VELOCITY
    // Compute velocity
    vec4 lastProj = vOutput.lastProjectedPos;

    // Usually it would be lastProj.xy / lastProj.w * 0.5 + 0.5
    // But the vertex shader already does the * 0.5
    vec2 lastTexcoord = lastProj.xy / lastProj.w + 0.5;
    vec2 fragCoord = (ivec2(gl_FragCoord.xy)+0.5) / vec2(WINDOW_WIDTH, WINDOW_HEIGHT);

    // * 255 prevents precision errors
    vec2 velocity = (lastTexcoord - fragCoord) * 255.0;

    #else
    vec2 velocity = vec2(0);
    #endif

    // Saturate
    m.roughness = saturate(m.roughness);
    m.metallic = saturate(m.metallic);
    m.specular = saturate(m.specular);

    // Output
    color0 = vec4(m.position.x, m.position.y, m.position.z, m.roughness);
    color1 = vec4(normal.x, normal.y,normal.z, m.translucency);
    color2 = vec4(velocity.x, velocity.y, m.specular, m.metallic);
    color3 = vec4(color.x, color.y, color.z, 0);
}
