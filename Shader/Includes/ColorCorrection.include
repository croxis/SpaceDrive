#pragma once

#pragma include "Includes/Configuration.include"

// // Instagram effect, yay! :D
// vec3 convertColorSpace(vec3 x1) {
//     vec3 x2 = x1 * x1;
//     vec3 x3 = x2 * x1;
//     vec3 x4 = x3 * x1;
//     vec3 x5 = x4 * x1;
//     vec3 result;

//     result.r = 0.078619672271 +
//         (0.95704630331)*x1.r +
//         (1.67552722496)*x2.r +
//         (-4.43954259306)*x3.r +
//         (4.05428794615)*x4.r +
//         (-1.37605047802)*x5.r;
//     result.g = -0.00167123955185 +
//         (0.671997329728)*x1.g +
//         (3.09694633717)*x2.g +
//         (-5.30948014199)*x3.g +
//         (2.8547560319)*x4.g +
//         (-0.312785174623)*x5.g;
//     result.b = 0.0744127064858 +
//         (0.928306646392)*x1.b +
//         (0.940123058005)*x2.b +
//         (-2.62632861258)*x3.b +
//         (2.4523831772)*x4.b +
//         (-0.858903293136)*x5.b;

//     return saturate(result);
// }


vec3 applyColorLUT(sampler2D lut, vec3 color) {


    float lutSize = float(textureSize(lut, 0).y);

    color = saturate(color);

    vec2 texcXY = vec2(color.r * 1.0 / lutSize, 1.0 - color.g);

    int frameZ = int(color.b * lutSize);
    float offsZ = fract(color.b * lutSize); 

    vec3 sample1 = texture(lut, texcXY + vec2(frameZ / lutSize, 0)).rgb;
    vec3 sample2 = texture(lut, texcXY + vec2( (frameZ + 1) / lutSize, 0)).rgb;

    return mix(sample1, sample2, offsZ);
}