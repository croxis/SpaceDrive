#version 400
#pragma file "Final.fragment"


#extension GL_EXT_shader_image_load_store : enable

#include "Includes/Configuration.include"
#include "Includes/PositionReconstruction.include"
#include "Includes/ColorCorrection.include"
#include "Includes/TemporalReprojection.include"


in vec2 texcoord;

uniform sampler2D velocityTex;
uniform sampler2D colorTex;
// uniform sampler2D depthTex;

uniform float motionBlurFactor;

uniform sampler2D debugTex;

out vec3 result;

void main() {

    #if 0
        result = texture(debugTex, texcoord).rgb;
        return;
    #endif

    // Fetch screen size, so we don't have to pass it as a shader input
    ivec2 screenSize = textureSize(colorTex, 0);

    // Screen coordinate (as int vec)
    ivec2 screenCoord = ivec2(gl_FragCoord.xy);

    // Store last frame 
    storeTemporalReprojection(screenCoord);

    #if 1

    vec2 pixelVelocity = textureLod(velocityTex, texcoord, 0).xy
            / 255.0 * motionBlurFactor * 1.2;
    // vec2 pixelVelocity = vec2(0.0);

    float chromaticFactor = (distance(vec2(0.5), texcoord*vec2(1.2,1))-0.2) * 2.0;
    vec2 redAbVector = vec2(chromaticFactor,0) / screenSize;
    vec2 greenAbVector = vec2(0);
    vec2 blueAbVector = vec2(-chromaticFactor,0) / screenSize;


    #ifdef DEBUG_DISABLE_COLOR_CORRECTION
        redAbVector *= 0.0;
        blueAbVector *= 0.0;
    #endif

    result.r = textureLod(colorTex, texcoord + redAbVector, 0).r;
    result.g = textureLod(colorTex, texcoord + greenAbVector, 0).g;
    result.b = textureLod(colorTex, texcoord + blueAbVector, 0).b;

          

    #ifdef USE_MOTION_BLUR
    

        float velStrength = length(pixelVelocity);

        // Motion blur
        vec3 motionResult = vec3(0);
        
        for (int i = 1; i < MOTION_BLUR_SAMPLES; i++) {
            vec2 offset = pixelVelocity * (float(i) / float(MOTION_BLUR_SAMPLES - 1) - 0.5);
            motionResult += textureLod(colorTex, texcoord + offset, 0).rgb;
        }
        motionResult /= MOTION_BLUR_SAMPLES-1;

        result = mix(result, motionResult, saturate(velStrength*200.0) );
        // result = mix(result, motionResult, 1.0 );
    

        #ifdef DEBUG_DISABLE_MOTIONBLUR
            result = textureLod(colorTex, texcoord, 0).rgb;
        #endif

        if (velStrength < 0.00001) {
                // result = textureLod(colorTex, texcoord, 0).rgb;
        }

    #else
        result = textureLod(colorTex, texcoord, 0).rgb;
    #endif

    // result = textureLod(colorTex, texcoord, 0).rgb;
    
    // SRGB
    // result.xyz = sqrt(result.xyz);

    #ifndef DEBUG_DISABLE_COLOR_CORRECTION
        vec3 colorCorrected = convertColorSpace(result);
        result = mix( colorCorrected , result, 0.7);
    #endif

    

    float vignett = smoothstep(0, 1, 
        (length( (texcoord - vec2(0.5, 0.5)) * vec2(1.2, 1.0)  ) - 0.32) ) * 1.6;
    result *= 1.0 - vignett;

    // result.rgb = newFrameVal.rgb;
 

    #else
        result = texture(colorTex, texcoord).rgb;
        // result = vec3(1,0.5, 0.2);

    #endif



    // result = texture(adjustedNormals, texcoord).rgb;
    // result = textureLod(colorTex, texcoord, 0).rgb;
    // vec3 colorCorrected = convertColorSpace(result.xyz);
    // result.xyz = mix( colorCorrected , result.xyz, 0.6);

}