#version 430
layout (local_size_x = 16, local_size_y = 16) in;
 
uniform writeonly image2D dest;
uniform sampler2D initialHeight;
uniform float time;
uniform float length;
uniform int N;
uniform float gravity;

const float M_PI = 3.14159265359;

float dispersion(int x, int y) {
  float w_0 = 2.0 * M_PI / 200.0;
  float kx = M_PI * (2.0 * x - N) / length;
  float kz = M_PI * (2.0 * y - N) / length;
  return floor(sqrt(gravity * sqrt(kx * kx + kz * kz)) / w_0) * w_0;
}

vec2 multiplyComplex(vec2 a, vec2 b) {
  return vec2(
      a.x*b.x - a.y*b.y,
      a.x*b.y + a.y*b.x
    );
}

vec2 hTilde(float t, int x, int y) {
  vec4 initialValues = texelFetch(initialHeight, ivec2(x,y), 0);
  vec2 htilde0 = initialValues.xy;
  vec2 htilde0mkconj = initialValues.zw;
  float omegat = dispersion(x, y) * t;
  float cos_ = cos(omegat);
  float sin_ = sin(omegat);
  vec2 c0 = vec2(cos_,  sin_);
  vec2 c1 = vec2(cos_, -sin_);
  vec2 res = multiplyComplex(htilde0, c0) + multiplyComplex(htilde0mkconj, c1);
  return res;
}


void main() {
  ivec2 texelCoords = ivec2(gl_GlobalInvocationID.xy);
  vec4 result = vec4(hTilde(time, texelCoords.x, texelCoords.y),0,1);
  imageStore(dest, texelCoords, result);
}