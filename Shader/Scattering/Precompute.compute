#version 430
 
#include "Scattering/ScatteringOptions.include"
#include "Scattering/Scattering.include"

// Set the number of invocations in the work group.
// In this case, we operate on the image in 16x16 pixel tiles.
layout (local_size_x = 16, local_size_y = 16) in;
 
// Declare the texture inputs
// uniform readonly image2D fromTex;
layout(rgba16f) uniform image2D transmittanceTex;
layout(rgba16f) uniform image2D deltaETex;
 
uniform ScatteringOptions options;

void imageStore3D(
        layout(rgba16f) image2D tex,
        ivec3 coord,
        vec4 val,
        int w) {
    ivec2 newCoord = coord.xy + ivec2(coord.z * w, 0);
    imageStore(tex, newCoord, val);
}


void main() {

    // Texcoords
    ivec2 pixOffset = ivec2(gl_GlobalInvocationID.xy);

    // Texture is 64x16 per layer
    // Dispatch is 256x64
    // So it's 16 * 4 = 16 Layers but we need to compute 32 layers.
    // So 2 passes are required
    int layerX = pixOffset.x / 64;
    int layerY = pixOffset.y / 16;
    int layerPass1 = layerX + layerY * 4;        
    int layerPass2 = layerPass1 + 16;        
    ivec2 layerCoord = pixOffset.xy % ivec2(64, 16);


    // Transmittance
    float r, muS;
    getTransmittanceRMu(options, pixOffset, r, muS);

    float opticalDepthRayleigh  = transmittanceOpticalDepth(options, options.rayleighFactor, r, muS);
    float opticalDepthMie  = transmittanceOpticalDepth(options, options.mieFactor, r, muS);

    vec3 combinedDepth = options.betaRayleigh * opticalDepthRayleigh + options.betaMieScatteringAdjusted * opticalDepthMie;
    combinedDepth = exp(-combinedDepth);
    imageStore(transmittanceTex, pixOffset, vec4(combinedDepth, 1.0));

    barrier();
    memoryBarrier();

    // Irradiance 1 (DeltaE)
    vec3 testLoad = imageLoad(transmittanceTex, layerCoord*4).rgb;

    // testLoad = vec3(layerCoord.x / 64.0, layerCoord.y / 16.0, 0.0);

    imageStore3D(deltaETex, ivec3(layerCoord, layerPass1), vec4( testLoad, 1.0), 64) ;
    imageStore3D(deltaETex, ivec3(layerCoord, layerPass2), vec4( testLoad, 1.0 ), 64);

    // imageStore(transmittanceTex, pixOffset, vec4( float(layerCoord.x) / 64.0, float(layerCoord.y) / 16.0,0, 1.0 ));
    imageStore(transmittanceTex, pixOffset, vec4( float(layerPass1) / 16.0, 0, 0, 1.0 ));

}