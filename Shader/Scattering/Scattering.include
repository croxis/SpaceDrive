

#include "Scattering/ScatteringOptions.include"



#ifndef NO_SCATTERING_SAMPLERS

    uniform sampler2D transmittanceColor;

#endif


#ifndef M_PI
    #define M_PI 3.141592657
#endif


void getTransmittanceRMu(ScatteringOptions options, out float r, out float muS) {
    r = gl_FragCoord.y / float(SCATTERING_TRANSMITTANCE_H);
    muS = gl_FragCoord.x / float(SCATTERING_TRANSMITTANCE_W);

    if (options.transmittanceNonLinear) {
        r = options.radiusGround + (r * r) * (options.radiusAtmosphere - options.radiusGround);
        muS = -0.15 + tan(1.5 * muS) / tan(1.5) * (1.0 + 0.15);
    } else {
        r = options.radiusGround + r * (options.radiusAtmosphere - options.radiusGround);
        muS = -0.15 + muS * (1.0 + 0.15);
    }
}

// nearest intersection of ray r,mu with ground or top atmosphere boundary
// mu=cos(ray zenith angle at ray origin)
float limit(ScatteringOptions options, float r, float mu) {
    float dout = -r * mu + sqrt(r * r * (mu * mu - 1.0) + (options.radiusAtmosphere + 1) * (options.radiusAtmosphere + 1) );
    float delta2 = r * r * (mu * mu - 1.0) + options.radiusGround * options.radiusGround;
    if (delta2 >= 0.0) {
        float din = -r * mu - sqrt(delta2);
        if (din >= 0.0) {
            dout = min(dout, din);
        }
    }
    return dout;
}


// optical depth for ray (r,mu) of length d, using analytic formula
// (mu=cos(view zenith angle)), intersections with ground ignored
// H=height scale of exponential density function
// float opticalDepth(ScatteringOptions options, float H, float r, float mu, float d) {
//     float a = sqrt((0.5/H)*r);
//     vec2 a01 = a*vec2(mu, mu + d / r);
//     vec2 a01s = sign(a01);
//     vec2 a01sq = a01*a01;
//     float x = a01s.y > a01s.x ? exp(a01sq.x) : 0.0;
//     vec2 y = a01s / (2.3193*abs(a01) + sqrt(1.52*a01sq + 4.0)) * vec2(1.0, exp(-d/H*(d/(2.0*r)+mu)));
//     return sqrt((6.2831*H)*r) * exp((options.radiusGround-r)/H) * (x + dot(y, vec2(1.0, -1.0)));
// }



void getDhdhR(ScatteringOptions options, int layer, out vec4 dhdH, out float r) {

    r = layer / (SCATTERING_RES_R - 1.0);
    r = r * r;
    r = sqrt(options.radiusGround * options.radiusGround + 
        r * (options.radiusAtmosphere * options.radiusAtmosphere - options.radiusGround * options.radiusGround)) +
        (layer == 0 ? 0.01 : (layer == SCATTERING_RES_R - 1 ? -0.001 : 0.0));
    float dmin = options.radiusAtmosphere - r;
    float dmax = sqrt(r * r - options.radiusGround * options.radiusGround) 
                 + sqrt(options.radiusAtmosphere * options.radiusAtmosphere - options.radiusGround * options.radiusGround);
    float dminp = r - options.radiusGround;
    float dmaxp = sqrt(r * r - options.radiusGround * options.radiusGround);
    dhdH = vec4(dmin, dmax, dminp, dmaxp);
}


void getIrradianceRMuS(ScatteringOptions options, out float r, out float muS) {
    r = options.radiusGround + (gl_FragCoord.y - scatteringTexcoordShift.y) / (float(SCATTERING_SKY_H) - 1.0) * (options.radiusAtmosphere - options.radiusGround);
    muS = -0.2 + (gl_FragCoord.x - scatteringTexcoordShift.x) / (float(SCATTERING_SKY_W) - 1.0) * (1.0 + 0.2);
}


vec2 getTransmittanceUV(ScatteringOptions options, float r, float mu) {
    float uR, uMu;
    if (options.transmittanceNonLinear) {
        uR = sqrt((r - options.radiusGround) / (options.radiusAtmosphere - options.radiusGround));
        uMu = atan((mu + 0.15) / (1.0 + 0.15) * tan(1.5)) / 1.5;
    } else {
        uR = (r - options.radiusGround) / (options.radiusAtmosphere - options.radiusGround);
        uMu = (mu + 0.15) / (1.0 + 0.15);
    }
    return vec2(uMu, uR);
}


void getMuMuSNu(ScatteringOptions options, float r, vec4 dhdH, out float mu, out float muS, out float nu) {
    float x = gl_FragCoord.x - scatteringTexcoordShift.x;
    float y = gl_FragCoord.y - scatteringTexcoordShift.y;

    if (options.inscatterNonLinear) {

        if (y < float(SCATTERING_RES_MU) / 2.0) {
            float d = 1.0 - y / (float(SCATTERING_RES_MU) / 2.0 - 1.0);
            d = min(max(dhdH.z, d * dhdH.w), dhdH.w * 0.999);
            mu = (options.radiusGround * options.radiusGround - r * r - d * d) / (2.0 * r * d);
            mu = min(mu, -sqrt(1.0 - (options.radiusGround / r) * (options.radiusGround / r)) - 0.001);
        } else {
            float d = (y - float(SCATTERING_RES_MU) / 2.0) / (float(SCATTERING_RES_MU) / 2.0 - 1.0);
            d = min(max(dhdH.x, d * dhdH.y), dhdH.y * 0.999);
            mu = (options.radiusAtmosphere * options.radiusAtmosphere - r * r - d * d) / (2.0 * r * d);
        }
        muS = mod(x, float(SCATTERING_RES_MU_S)) / (float(SCATTERING_RES_MU_S) - 1.0);
        // paper formula
        //muS = -(0.6 + log(1.0 - muS * (1.0 -  exp(-3.6)))) / 3.0;
        // better formula
        muS = tan((2.0 * muS - 1.0 + 0.26) * 1.1) / tan(1.26 * 1.1);
        nu = -1.0 + floor(x / float(SCATTERING_RES_MU_S)) / (float(SCATTERING_RES_NU) - 1.0) * 2.0;

    } else {
        mu = -1.0 + 2.0 * y / (float(SCATTERING_RES_MU) - 1.0);
        muS = mod(x, float(SCATTERING_RES_MU_S)) / (float(SCATTERING_RES_MU_S) - 1.0);
        muS = -0.2 + muS * 1.2;
        nu = -1.0 + floor(x / float(SCATTERING_RES_MU_S)) / (float(SCATTERING_RES_NU) - 1.0) * 2.0;
    }

}


// transmittance(=transparency) of atmosphere for infinite ray (r,mu)
// (mu=cos(view zenith angle)), intersections with ground ignored
vec3 transmittance(ScatteringOptions options, float r, float mu) {
    vec2 uv = getTransmittanceUV(options, r, mu);
    return texture(transmittanceColor, uv).rgb;
}



// transmittance(=transparency) of atmosphere between x and x0
// assume segment x,x0 not intersecting ground
// d = distance between x and x0, mu=cos(zenith angle of [x,x0) ray at x)
vec3 transmittance(ScatteringOptions options, float r, float mu, float d) {
    vec3 result;
    float r1 = sqrt(r * r + d * d + 2.0 * r * mu * d);
    float mu1 = (r * mu + d) / r1;
    if (mu > 0.0) {
        result = min(transmittance(options, r, mu) / transmittance(options, r1, mu1), 1.0);
    } else {
        result = min(transmittance(options, r1, -mu1) / transmittance(options, r, -mu), 1.0);
    }
    return result;
}


// Rayleigh phase function
float phaseFunctionR(ScatteringOptions options, float mu) {
    return (3.0 / (16.0 * M_PI)) * (1.0 + mu * mu);
}

// Mie phase function
float phaseFunctionM(ScatteringOptions options, float mu) {
    return 1.5 * 1.0 / (4.0 * M_PI) * (1.0 - options.mieG*options.mieG) * pow(1.0 + (options.mieG*options.mieG) - 2.0*options.mieG*mu, -3.0/2.0) * (1.0 + mu * mu) / (2.0 + options.mieG*options.mieG);
}

vec2 getIrradianceUV(ScatteringOptions options, float r, float muS) {
    float uR = (r - options.radiusGround) / (options.radiusAtmosphere - options.radiusGround);
    float uMuS = (muS + 0.2) / (1.0 + 0.2);
    return vec2(uMuS, uR);
}

vec3 irradiance(ScatteringOptions options, sampler2D sampler, float r, float muS) {
    vec2 uv = getIrradianceUV(options, r, muS);
    return texture(sampler, uv).rgb;
}


vec4 texture4D(ScatteringOptions options, sampler3D table, float r, float mu, float muS, float nu)
{
    float H = sqrt(options.radiusAtmosphere * options.radiusAtmosphere - options.radiusGround * options.radiusGround);
    float rho = sqrt(r * r - options.radiusGround * options.radiusGround);

    float uR = 0.0;
    float uMu = 0.0;
    float uMuS = 0.0;

    if (options.inscatterNonLinear) {
        float rmu = r * mu;
        float delta = rmu * rmu - r * r + options.radiusGround * options.radiusGround;
        vec4 cst = rmu < 0.0 && delta > 0.0 ? vec4(1.0, 0.0, 0.0, 0.5 - 0.5 / float(SCATTERING_RES_MU)) : vec4(-1.0, H * H, H, 0.5 + 0.5 / float(SCATTERING_RES_MU));
        uR = 0.5 / float(SCATTERING_RES_R) + rho / H * (1.0 - 1.0 / float(SCATTERING_RES_R));
        uMu = cst.w + (rmu * cst.x + sqrt(delta + cst.y)) / (rho + cst.z) * (0.5 - 1.0 / float(SCATTERING_RES_MU));
        // paper formula
        //float uMuS = 0.5 / float(SCATTERING_RES_MU_S) + max((1.0 - exp(-3.0 * muS - 0.6)) / (1.0 - exp(-3.6)), 0.0) * (1.0 - 1.0 / float(SCATTERING_RES_MU_S));
        // better formula
        uMuS = 0.5 / float(SCATTERING_RES_MU_S) + (atan(max(muS, -0.1975) * tan(1.26 * 1.1)) / 1.1 + (1.0 - 0.26)) * 0.5 * (1.0 - 1.0 / float(SCATTERING_RES_MU_S));
    } else {
        uR = 0.5 / float(SCATTERING_RES_R) + rho / H * (1.0 - 1.0 / float(SCATTERING_RES_R));
        uMu = 0.5 / float(SCATTERING_RES_MU) + (mu + 1.0) / 2.0 * (1.0 - 1.0 / float(SCATTERING_RES_MU));
        uMuS = 0.5 / float(SCATTERING_RES_MU_S) + max(muS + 0.2, 0.0) / 1.2 * (1.0 - 1.0 / float(SCATTERING_RES_MU_S));
    }


    float lerp = (nu + 1.0) / 2.0 * (float(SCATTERING_RES_NU) - 1.0);
    float uNu = floor(lerp);
    lerp = lerp - uNu;
  
    return texture(table, vec3((uNu + uMuS) / float(SCATTERING_RES_NU), uMu, (uR) )) * (1.0 - lerp) +
           texture(table, vec3((uNu + uMuS + 1.0) / float(SCATTERING_RES_NU), uMu, (uR) )) * lerp;
}
