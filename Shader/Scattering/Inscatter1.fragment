#version 150


#pragma include "Includes/ScatteringPrecompute.include"

uniform ScatteringOptions options;

in vec2 texcoord;
out vec4 rayOutput;
out vec4 mieOutput;

in float layer;




void integrand(ScatteringOptions options, float r, float mu, float muS, float nu, float t, out vec3 ray, out vec3 mie) {
    ray = vec3(0.0);
    mie = vec3(0.0);
    float ri = sqrt(r * r + t * t + 2.0 * r * mu * t);
    float muSi = (nu * t + muS * r) / ri;
    ri = max(options.radiusGround, ri);
    if (muSi >= -sqrt(1.0 - options.radiusGround * options.radiusGround / (ri * ri))) {
        vec3 ti = transmittance(options, r, mu, t) * transmittance(options, ri, muSi);
        ray = exp(-(ri - options.radiusGround) / options.rayleighFactor) * ti;
        mie = exp(-(ri - options.radiusGround) / options.mieFactor) * ti;
    }
}


void inscatter(ScatteringOptions options, float r, float mu, float muS, float nu, out vec3 ray, out vec3 mie) {
    ray = vec3(0.0);
    mie = vec3(0.0);
    float dx = limit(options, r, mu) / float(INSCATTER_INTEGRAL_SAMPLES);
    float xi = 0.0;
    vec3 rayi;
    vec3 miei;
    integrand(options, r, mu, muS, nu, 0.0, rayi, miei);
    for (int i = 1; i <= INSCATTER_INTEGRAL_SAMPLES; ++i) {
        float xj = float(i) * dx;
        vec3 rayj;
        vec3 miej;
        integrand(options, r, mu, muS, nu, xj, rayj, miej);
        ray += (rayi + rayj) / 2.0 * dx;
        mie += (miei + miej) / 2.0 * dx;
        xi = xj;
        rayi = rayj;
        miei = miej;
    }
    ray *= options.betaRayleigh;
    mie *= options.betaMieScattering;
}


void main() {

    vec4 dhdH; 
    float r; 
    getDhdhR(options, int(layer), dhdH, r);

    vec3 ray;
    vec3 mie;
    float mu, muS, nu;
    getMuMuSNu(options, r, dhdH, mu, muS, nu);
    inscatter(options, r, mu, muS, nu, ray, mie);

    rayOutput = vec4( ray, 0.0);
    mieOutput = vec4( mie, 0.0);
}