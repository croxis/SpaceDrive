#version 150
#pragma file "InscatterN.fragment"

#include "Scattering/ScatteringOptions.include"
#include "Scattering/Scattering.include"

uniform ScatteringOptions options;

in vec2 texcoord;
out vec4 result;
in float layer;

uniform sampler3D deltaJSampler;

vec3 integrand(ScatteringOptions options, float r, float mu, float muS, float nu, float t) {
    float ri = sqrt(r * r + t * t + 2.0 * r * mu * t);
    float mui = (r * mu + t) / ri;
    float muSi = (nu * t + muS * r) / ri;
    return texture4D(options, deltaJSampler, ri, mui, muSi, nu).rgb * 
        transmittance(options, r, mu, t);
}

vec3 inscatter(ScatteringOptions options, float r, float mu, float muS, float nu) {
    vec3 raymie = vec3(0.0);
    float dx = limit(options, r, mu) / float(INSCATTER_INTEGRAL_SAMPLES);
    float xi = 0.0;
    vec3 raymiei = integrand(options, r, mu, muS, nu, 0.0);
    for (int i = 1; i <= INSCATTER_INTEGRAL_SAMPLES; ++i) {
        float xj = float(i) * dx;
        vec3 raymiej = integrand(options, r, mu, muS, nu, xj);
        raymie += (raymiei + raymiej) / 2.0 * dx;
        xi = xj;
        raymiei = raymiej;
    }
    return raymie;
}

void main() {

    vec4 dhdH; 
    float r; 
    getDhdhR(options, int(layer), dhdH, r);

    float mu, muS, nu;
    getMuMuSNu(options, r, dhdH, mu, muS, nu);

    vec3 scattered = inscatter(options, r, mu, muS, nu);
    result = vec4(scattered, 0);

}