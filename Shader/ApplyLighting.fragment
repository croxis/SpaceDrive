#version 400
#pragma file "ApplyLighting.fragment"

#extension GL_ARB_shader_image_load_store : enable


// TODO: Make some benchmarks to see wheter unrolling
// is faster or slower ..
#pragma optionNV (unroll all)

#include "Includes/Configuration.include"
#include "Includes/Light.include"
#include "Includes/Material.include"
#include "Includes/ShadowSource.include"
#include "Includes/ColorCorrection.include"
#include "Includes/PositionReconstruction.include"
#include "Includes/SphericalHarmonics.include"
#include "Includes/GlobalIllumination.include"


uniform sampler2D data0;
uniform sampler2D data1;
uniform sampler2D data2;
uniform sampler2D data3;

uniform sampler2D depth;


uniform sampler2D shadowAtlas1;

// layout (r32i) readonly uniform iimage2D lightsPerTile;
uniform isampler2D lightsPerTile;

uniform Light lights[MAX_VISIBLE_LIGHTS]; 
uniform ShadowSource shadowSources[SHADOW_MAX_TOTAL_MAPS]; 
in vec2 texcoord;


#ifdef USE_TEMPORAL_REPROJECTION
    uniform int temporalProjXOffs;
#endif



#ifdef USE_GLOBAL_ILLUMINATION
    uniform GIData giData;
#endif


uniform sampler2D noiseTexture;
uniform vec4 bufferSize;

uniform vec3 cameraPosition;

// Has to be after the uniforms
#include "Occlusion/Init.include"
#include "Includes/Lighting.include"


out vec4 lightingResult;


#ifdef USE_SCATTERING

#include "Scattering/ScatteringOptions.include"
#include "Scattering/Final.include"

uniform sampler3D inscatterSampler;
uniform ScatteringOptions scatteringOptions;
#endif

vec3 getPositionWorld(vec2 coord) {
    float z = texture(depth, coord).x;
    return calculateSurfacePos(z, coord);
}


void main() {


    // Compute texcoords
    ivec2 screenSize = textureSize(data0, 0);

    #ifdef USE_TEMPORAL_REPROJECTION
     ivec2 screenCoord = ivec2(texcoord * vec2(screenSize.x + 1 , screenSize.y)); 

        // Shift x by 1 for temporal reprojection
        // Usually we would do just screenCoord.x += temporalProjXOffs
        // But using a checkerboard pattern removes a lot of artifacts, 
        // as you otherwise can see the line-pattern very obviously. Using
        // a checkerboard more gives a dithering effect, which is barely visible
        screenCoord.x += (screenCoord.x + screenCoord.y) % 2 == temporalProjXOffs ? -1 : 0;
        vec2 correctTexcoord = (vec2(screenCoord)+0.5) / vec2(screenSize);

    #else

        ivec2 screenCoord = ivec2(gl_FragCoord.xy);
        vec2 correctTexcoord = texcoord;

    #endif

    ivec2 precomputeCoord = ivec2( vec2(screenCoord) / 
        vec2(LIGHTING_COMPUTE_PATCH_SIZE_X, LIGHTING_COMPUTE_PATCH_SIZE_Y) ) * 8;


    // Extract material data
    vec4 target0data = texelFetch(data0, screenCoord, 0);
    vec4 target1data = texelFetch(data1, screenCoord, 0);
    vec4 target2data = texelFetch(data2, screenCoord, 0);
    vec4 target3data = texelFetch(data3, screenCoord, 0);
    Material material = unpackMaterial(target0data, target1data, target2data, target3data);

    #ifdef DEBUG_RM_LIGHTING
        material.baseColor = vec3(1);
    #endif

    // Fetch the light counts
    // We perform a min as it *might* be that we read a wrong value
    // from the texture. Imagine reading 123123123 from the texture,
    // then the light processing loop would be 123123123 iterations long,
    // which simply crashes the driver. With this method it would be only
    // a few hundreds, which is long but does not crash the driver.
    int countPointLight = min(MAX_POINT_LIGHTS, 
        texelFetch(lightsPerTile, precomputeCoord + ivec2(0,0), 0).r);

    int countPointLightShadow = min(MAX_SHADOW_POINT_LIGHTS, 
        texelFetch(lightsPerTile, precomputeCoord + ivec2(1,0), 0).r);

    int countDirectionalLight = min(MAX_SHADOW_POINT_LIGHTS, 
        texelFetch(lightsPerTile, precomputeCoord + ivec2(2,0), 0).r);

    int countDirectionalLightShadow = min(MAX_SHADOW_POINT_LIGHTS, 
        texelFetch(lightsPerTile, precomputeCoord + ivec2(3,0), 0).r);

    // Lighting result gets stored in this variables
    vec3 result = vec3(0);
    vec4 giResult = vec4(1);
    vec3 specularColor = vec3(1);
    vec3 ambient = vec3(0);

    // Compute depth normal
    vec3 pixelW = vec3(bufferSize.xy, 0);
    vec3 world = getPositionWorld(texcoord);
    vec3 worldX1 = getPositionWorld(texcoord + pixelW.xz);
    vec3 worldY1 = getPositionWorld(texcoord + pixelW.zy);
    vec3 wsNormal = (cross(world - worldX1, world - worldY1));
    wsNormal = normalize(wsNormal);

    // There should be a more elegant way, but for now it works. I don't want to
    // waste a gbuffer flag for marking the skybox.
    bool isSkybox = distance(material.position, cameraPosition) > SKYBOX_BEGIN;
    
    float occlusionTotal = 0.0;

    vec3 scatteringReflectedColor = vec3(0,0,0);
    vec3 viewVector = normalize(cameraPosition - material.position);

    // Scattering
    #ifdef USE_SCATTERING

    vec3 attenuation;
    float irradianceFactor;

    // Reconstruct position - otherwise we have precision errors
    vec3 viewDir = calculateSurfacePos(1.0, texcoord);

    vec3 posFromDepth = calculateSurfacePos(texelFetch(depth, screenCoord, 0).x, texcoord);

    #ifndef DEBUG_DISABLE_SCATTERING
    float inscatterFactor = 5.0;

    // Occlusion on skybox leads to artifacts
    if (isSkybox) {
        occlusionTotal = 0.0;

        // Push very far away
        posFromDepth *= 1e20;
        inscatterFactor = 2.0;
    }

    vec3 scatteringResult = scatteringComputeInscatteredLight(
        scatteringOptions,
        posFromDepth, 
        cameraPosition,
        viewDir, 
        inscatterSampler,
        attenuation, 
        irradianceFactor);

    vec3 reflectVector = reflect(viewVector, material.normal);
    vec3 startPos = vec3(0);
    vec3 endPos = reflectVector * 1e17;
    endPos = vec3(0,0,1e16);
    vec3 startToEnd = normalize(startPos - endPos);
    scatteringReflectedColor = scatteringComputeInscatteredLight(
        scatteringOptions,
        endPos, 
        startPos,
        startToEnd, 
        inscatterSampler,
        attenuation, 
        irradianceFactor) * 1.0;

    // scatteringReflectedColor = mix(scatteringReflectedColor, vec3(1.0), material.roughness);

    // scatteringReflectedColor = 1.0 - exp(-4.0 * scatteringReflectedColor);
    // scatteringReflectedColor = scatteringReflectedColor;

    
        result += scatteringResult * inscatterFactor ;
    #endif

    #endif


    // We can skip lighting for the skybox
    if (isSkybox) {


    } else {

        // Compute Occlusion
        float distanceToCamera = distance(cameraPosition, material.position);
        OCCLUSION_RESULT_TYPE occlusionResult = computeOcclusion(correctTexcoord, screenCoord, distanceToCamera);


        occlusionResult = 1.0 - occlusionResult;

        #ifdef DEBUG_DISABLE_OCCLUSION
            occlusionResult = 0.0;
        #endif



        #ifdef USE_GLOBAL_ILLUMINATION
            #ifndef DEBUG_DISABLE_GI
                vec3 lightDir = vec3(-0.534, -0.46, 0.707);

                if (countDirectionalLightShadow > 0) {
                    int currentLightId = texelFetch(lightsPerTile, precomputeCoord + ivec2(0,6), 0).r;
                    Light currentLight = lights[currentLightId];
                    lightDir = currentLight.direction;
                }

                giResult = computeGlobalIllumination(material, -viewVector, giData, specularColor, lightDir, wsNormal, scatteringReflectedColor);

            #endif

        #endif


        // Metallic materials don't have much occlusion
        // occlusionResult = mix(occlusionResult, vec4(0.0), saturate(material.metallic-0.3) );



        // Compute point lights
        ivec2 baseOffset = precomputeCoord + ivec2(0,1);
        ivec2 currentOffset = ivec2(0);
        int currentLightId = 0;
        Light currentLight;

        for (int i = 0; i < countPointLight; i++) {
            currentOffset = ivec2(i % 8, i / 8);
            currentLightId = texelFetch(lightsPerTile, baseOffset + currentOffset, 0).r;
            currentLight = lights[currentLightId];

            result += applyPointLight(currentLight, material OCCLUSION_PER_LIGHT_SEND_PARAMETERS );
        }

        // Compute shadow point lights
        baseOffset = precomputeCoord + ivec2(0,3);
        for (int i = 0; i < countPointLightShadow; i++) {
            currentOffset = ivec2(i % 8, i / 8);
            currentLightId = texelFetch(lightsPerTile, baseOffset + currentOffset, 0).r;
            currentLight = lights[currentLightId];

            #if USE_SHADOWS
                result += applyPointLightWithShadow(currentLight, material OCCLUSION_PER_LIGHT_SEND_PARAMETERS );
            #else
                result += applyPointLight(currentLight, material OCCLUSION_PER_LIGHT_SEND_PARAMETERS );
            #endif
        }

        // Compute directional lights
        baseOffset = precomputeCoord + ivec2(0,5);
        for (int i = 0; i < countDirectionalLight; i++) {
            currentOffset = ivec2(i % 8, i / 8);
            currentLightId = texelFetch(lightsPerTile, baseOffset + currentOffset, 0).r;
            currentLight = lights[currentLightId];
            result += applyDirectionalLight(currentLight, material OCCLUSION_PER_LIGHT_SEND_PARAMETERS );
        }


        // Compute shadowed directinal lights
        baseOffset = precomputeCoord + ivec2(0,6);
        for (int i = 0; i < countDirectionalLightShadow; i++) {
            currentOffset = ivec2(i % 8, i / 8);
            currentLightId = texelFetch(lightsPerTile, baseOffset + currentOffset, 0).r;
            currentLight = lights[currentLightId];
            result += applyDirectionalLightWithShadow(currentLight, material OCCLUSION_PER_LIGHT_SEND_PARAMETERS );
        }


        // Ambient / Reflections

        ambient = computeAmbient(material, giResult, specularColor, viewVector, wsNormal);    
        result += ambient;
    }



    // SRGB

    result = 1.0f - exp(-1.0 * result);
    // result *= 1.0;
    result.xyz = pow(result.xyz, vec3(1.0 / 2.2) );

    #ifdef ENABLE_FOG
        float fogFactor = saturate( (distance(cameraPosition, material.position)-10.0) / 500.0);
        if (isSkybox) fogFactor = 0.0;
        result = mix(result, vec3(1.0,1.0,1.2), fogFactor);
        occlusionTotal = mix(occlusionTotal, 0.0, fogFactor * 2.0);
    #endif


    #ifdef DEBUG_RM_GI
        result = vec3(giResult);
        result = 1.0f - exp(-1.0 * result);
        occlusionTotal = 0.0;
    #endif

    #ifdef DEBUG_RM_BASECOLOR
        result = sqrt(material.baseColor);
        occlusionTotal = 0.0;
    #endif

    #ifdef DEBUG_RM_SPECULAR
        result = vec3(material.specular);
        occlusionTotal = 0.0;
    #endif

    #ifdef DEBUG_RM_OCCLUSION
        result = vec3(1);
        occlusionTotal = occlusionResult;
        // occlusionTotal = 0.0;
        // result = vec3(occlusionResult);
    #endif

    #ifdef DEBUG_RM_METALLIC
        result = vec3(material.metallic);
        occlusionTotal = 0.0;
    #endif

    #ifdef DEBUG_RM_ROUGHNESS
        result = vec3(material.roughness);
        occlusionTotal = 0.0;
    #endif

    #ifdef DEBUG_RM_NORMAL
        result = vec3((material.normal));
        // result = vec3((material.normal.x));
        occlusionTotal = 0.0;
    #endif

    #ifdef DEBUG_RM_AMBIENT
        result = vec3(ambient);
        occlusionTotal = 0.0;
    #endif


    #ifdef DEBUG_RM_SCATTERING
        #ifdef USE_SCATTERING
            result = scatteringResult * inscatterFactor;
            result = 1.0f - exp(-1.5 * result);
            occlusionTotal = 0.0;
        #endif
    #endif



    lightingResult = vec4(result, 1.0 - saturate(occlusionTotal) );
}