#version 400
#pragma file "PrecomputeLights.fragment"

#extension GL_ARB_shader_image_load_store : enable

// TODO: Make some benchmarks to see wheter unrolling
// is faster or slower ..

// #pragma optionNV (unroll all)


// Includes
#include "Includes/Configuration.include"
#include "Includes/Light.include"
#include "Includes/Packing.include"
#include "Includes/PositionReconstruction.include"
#include "Includes/Frustum.include"
#include "Includes/LightCulling.include"

in vec2 texcoord;

BINDLESS uniform sampler2D depth;

layout (r32i) uniform iimage2D destination;

// Per-Light data and count
uniform Light lights[MAX_VISIBLE_LIGHTS];

uniform int countPointLight;
uniform int arrayPointLight[MAX_POINT_LIGHTS];

uniform int arrayPointLightShadow[MAX_POINT_LIGHTS];
uniform int countPointLightShadow;

uniform int countDirectionalLight;
uniform int arrayDirectionalLight[MAX_DIRECTIONAL_LIGHTS];

uniform int countDirectionalLightShadow;
uniform int arrayDirectionalLightShadow[MAX_DIRECTIONAL_LIGHTS];

uniform vec4 bufferSize;


// Matrices used for the culling
// I defined constants because the names are quite long ..
// But I think that will be fixed by rdb's new input system soon 
#define PROJ_MAT trans_apiview_of_mainCam_to_apiclip_of_mainCam
#define VIEW_MAT trans_mainRender_to_apiview_of_mainCam
#define MODEL_VIEW_PROJ_MAT trans_mainRender_to_apiclip_of_mainCam
uniform mat4 PROJ_MAT;
uniform mat4 VIEW_MAT;
uniform mat4 MODEL_VIEW_PROJ_MAT;

const ivec2 patchSize = ivec2(LIGHTING_COMPUTE_PATCH_SIZE_X, LIGHTING_COMPUTE_PATCH_SIZE_Y);


void main() {

    // Common variables
    ivec2 screenSize = textureSize(depth, 0);

    // How many patches there are (e.g. 50x30 for a resolution of 1600x960)
    ivec2 precomputeSize = ivec2(bufferSize.zw);

    // Our patch ID (0 .. precomputeSize)
    ivec2 precomputeCoord = ivec2(texcoord * precomputeSize);

    // Position on screen
    ivec2 virtualScreenSize = (precomputeSize) * patchSize;

    ivec2 screenCoord = ivec2( (gl_FragCoord.xy - 0.5) * patchSize);

    // Where to store the data
    ivec2 storageCoord = precomputeCoord * 8;

    // Compute Min and Max depth
    float minDepth = 1.0;
    float maxDepth = 0.0;

    ivec2 clampMax = ivec2(screenSize) - 1;
    ivec2 newCoord;
    float storedDepth;

    // vec2 texelSize = 1.0 / screenSize;
    // vec2 screenCoordTexel = vec2(newCoord) / screenSize;
    // vec2 newCoordTexel;

    // Compute min / max depth per tile
    for (int x = 0; x < LIGHTING_COMPUTE_PATCH_SIZE_X; x+=LIGHTING_MIN_MAX_DEPTH_ACCURACY*2) {
        for (int y = 0; y < LIGHTING_COMPUTE_PATCH_SIZE_X; y+=LIGHTING_MIN_MAX_DEPTH_ACCURACY) {
            newCoord = screenCoord + ivec2(x + y%2,y);
            // newCoordTexel = vec2(x,y) * texelSize + screenCoordTexel;

            // Check if out of screen bounds.
            // This is necessary if the precompute size is bigger than the
            // screen size. Otherwise the outer tiles will have a maxDepth of
            // 0 because they sample values which are outside of the colortex. 
            newCoord = min(newCoord, clampMax);
            // newCoordTexel = min(newCoordTexel, vec2(1.0) );

            storedDepth = texelFetch(depth, newCoord, 0).r;

            // storedDepth = texture(depth, newCoordTexel);

            minDepth = min(minDepth, storedDepth);
            maxDepth = max(maxDepth, storedDepth);

        }
    }

    // Also store linear depth to be able to compare
    // light depth and min/max depth easily
    float minDepthLinear = getLinearZFromZ(minDepth);
    float maxDepthLinear = getLinearZFromZ(maxDepth);

    // Init counters
    int processedPointLights = 0;
    int processedShadowPointLights = 0;
    int processedDirectionalLights = 0;
    int processedDirectionalShadowLights = 0;

    if (false && minDepthLinear > 9000.0) {
        // Only skybox. We can stop here.
        processedPointLights = 0;
        processedShadowPointLights = 0;

    } else {

        // Compute tile bounds, needed for frustum
        vec2 tileScale = vec2(virtualScreenSize) * 0.5f / vec2(patchSize);
        vec2 tileBias = tileScale - vec2(precomputeCoord);

        // Store matrices in local variables as their name
        // can get very long
        mat4 projMat = PROJ_MAT;
        mat4 viewMat = VIEW_MAT;
        mat4 mvpMat = MODEL_VIEW_PROJ_MAT;

        // Build frustum
        // Based on http://gamedev.stackexchange.com/questions/67431/deferred-tiled-shading-tile-frusta-calculation-in-opengl
        // Which is based on DICE's presentation
        vec4 frustumRL = vec4(-projMat[0][0] * tileScale.x, 0.0f, tileBias.x, 0.0f);
        vec4 frustumTL = vec4(0.0f, -projMat[1][1] * tileScale.y, tileBias.y, 0.0f);

        // The doc said frustumOffset = vec4(0,0,1,0) but panda uses 
        // apparently an inverted coordinate system
        const vec4 frustumOffset = vec4(0.0f, 0.0f, -1.0f, 0.0f);

        // Calculate frustum planes
        Frustum frustum;
        frustum.left   = normalize(frustumOffset - frustumRL);
        frustum.right  = normalize(frustumOffset + frustumRL);
        frustum.top    = normalize(frustumOffset - frustumTL);
        frustum.bottom = normalize(frustumOffset + frustumTL);
        frustum.near   = minDepthLinear;
        frustum.far    = maxDepthLinear;

        frustum.viewMat = viewMat;
        frustum.mvpMat  = mvpMat;

        // Reset data buffer (not neccessary, only for debugging)
        #ifdef LIGHTING_CLEAR_BUFFER_EACH_FRAME
            for (int x = 0; x < 8; x++) {
                for (int y = 0; y < 8; y++) {
                    imageStore(destination, storageCoord+ivec2(x, y), ivec4(0) );
                }
            }
        #endif  

        // Buffer layout:
        // First 8 pixels store count
        // Second/Third line stores point lights
        // Fourth/Fifth line stores shadow point lights
        // Sixt stores directional lights
        // Seventh stores directional shadowed lights
        // Eight is free (yet)

        // Process Point Lights
        ivec2 baseOffset = storageCoord + ivec2(0,1);
        ivec2 currentOffset = ivec2(0);

        for (int i = 0; i < countPointLight; i++) {
            int index = arrayPointLight[i];
            Light light = lights[index];
            if (isPointLightInFrustum(light, frustum)) {
                currentOffset = ivec2(processedPointLights % 8, processedPointLights / 8);
                imageStore(destination, baseOffset + currentOffset, ivec4(index));
                processedPointLights += 1;
            }
        }

        // Process shadowed point lights
        baseOffset = storageCoord + ivec2(0,3);
        currentOffset = ivec2(0);

        for (int i = 0; i < countPointLightShadow; i++) {
            int index = arrayPointLightShadow[i];
            Light light = lights[index];
            if (isPointLightInFrustum(light, frustum)) {
                currentOffset = ivec2(processedShadowPointLights % 8, processedShadowPointLights / 8);
                imageStore(destination, baseOffset + currentOffset, ivec4(index));
                processedShadowPointLights += 1;
            }
        }

        // Process directional lights
        baseOffset = storageCoord + ivec2(0,5);
        currentOffset = ivec2(0);

        for (int i = 0; i < countDirectionalLight; i++) {
            // No frustum check. Directional lights are always visible
            int index = arrayDirectionalLight[i];
            Light light = lights[index];
            currentOffset = ivec2(processedDirectionalLights % 8, processedDirectionalLights / 8);
            imageStore(destination, baseOffset + currentOffset, ivec4(index));
            processedDirectionalLights += 1;
        }


        // Process shadowed directional lights
        baseOffset = storageCoord + ivec2(0,6);
        currentOffset = ivec2(0);

        for (int i = 0; i < countDirectionalLightShadow; i++) {
            // No frustum check. Directional lights are always visible
            int index = arrayDirectionalLightShadow[i];
            Light light = lights[index];
            currentOffset = ivec2(processedDirectionalShadowLights % 8, processedDirectionalShadowLights / 8);
            imageStore(destination, baseOffset + currentOffset, ivec4(index));
            processedDirectionalShadowLights += 1;
        }


    }

    imageStore(destination, storageCoord + ivec2(0, 0), ivec4(processedPointLights));
    imageStore(destination, storageCoord + ivec2(1, 0), ivec4(processedShadowPointLights));
    imageStore(destination, storageCoord + ivec2(2, 0), ivec4(processedDirectionalLights));
    imageStore(destination, storageCoord + ivec2(3, 0), ivec4(processedDirectionalShadowLights));

    // float lightsVisibleFloat = float(processedPointLights + processedShadowPointLights) / float(2.0);
    // vec3 lightCountIndicator = vec3(lightsVisibleFloat, 1.0 - lightsVisibleFloat , 0);

}