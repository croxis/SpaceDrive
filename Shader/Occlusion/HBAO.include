


// https://gist.github.com/fisch0920/6770346

// number of directions to sample in UV space
#define HBAO_NUM_SAMPLE_DIRECTIONS 8

// number of sample steps when raymarching along a direction
#define HBAO_NUM_SAMPLE_STEPS      8
#define HBAO_APPLY_ATTENUATION     1
 
// const float hbaoSampleRadius = 5.0;
const float hbaoAngleBias = 0.1;
const float hbaoIntensity = 25.0;
const vec2  hbaoNoiseScale = vec2(0.0);

vec3 getPositionViewSpace(vec2 uv) {
  return texture(positionView, uv).xyz;
}

const float TWO_PI = 2.0 * M_PI;
const float hbaoTheta = TWO_PI / HBAO_NUM_SAMPLE_DIRECTIONS;

float computeHBAO(vec2 coord, float dist) {

  // return 1.0;
  
  vec3 originVS = getPositionViewSpace(coord);
  vec3 normalVS = texture(normalsView, coord).xyz;

  float radiusSS = 0.0; // radius of influence in screen space
  float radiusWS = 0.0; // radius of influence in world space
  

  // return abs(normalVS.x);
  // radiusSS = hbaoSampleRadius;
  // vec4 temp0 = viewProjectionInverseMatrix * vec4(0.0, 0.0, -1.0, 1.0);
  // vec3 out0  = temp0.xyz;
  // vec4 temp1 = viewProjectionInverseMatrix * vec4(radiusSS, 0.0, -1.0, 1.0);
  // vec3 out1  = temp1.xyz;
  
  // NOTE (travis): empirically, the main introduction of artifacts with HBAO 
  // is having too large of a world-space radius; attempt to combat this issue by 
  // clamping the world-space radius based on the screen-space radius' projection
  // radiusWS = min(tan(radiusSS * uFOV / 2.0) * originVS.y / 2.0, length(out1 - out0));
  
  radiusWS = 0.5;
  radiusSS = saturate(1.0 / dist) * 1.0;

  // early exit if the radius of influence is smaller than one fragment
  // since all samples would hit the current fragment.
  // if (dist > 120.0) {
  //   return 1.0;
  // }
  

  float cosTheta = cos(hbaoTheta);
  float sinTheta = sin(hbaoTheta);
  
  // matrix to create the sample directions
  mat2 deltaRotationMatrix = mat2(cosTheta, -sinTheta, sinTheta, cosTheta);
  
  // step vector in view space
  vec2 deltaUV = vec2(1.0, 0.0) * (radiusSS / (float(HBAO_NUM_SAMPLE_DIRECTIONS * HBAO_NUM_SAMPLE_STEPS) + 1.0));
  
  // we don't want to sample to the perimeter of R since those samples would be 
  // omitted by the distance attenuation (W(R) = 0 by definition)
  // Therefore we add a extra step and don't use the last sample.
  vec3 sampleNoise    = texture(dssdoNoiseTex, texcoord).xyz;
  sampleNoise.xy      = sampleNoise.xy * 2.0 - 1.0;

  sampleNoise = vec3(0);

  mat2 rotationMatrix = mat2(sampleNoise.x, -sampleNoise.y, 
                             sampleNoise.y,  sampleNoise.x);
  

  float minBias = hbaoAngleBias + dist * 0.005;
  // apply a random rotation to the base step vector
  // deltaUV = rotationMatrix * deltaUV;
  
  float jitter = sampleNoise.z+1.0;
  jitter = 0.0;
  float occlusion = 0.0;
  
  for (int i = 0; i < HBAO_NUM_SAMPLE_DIRECTIONS; ++i) {

    // incrementally rotate sample direction
    deltaUV = deltaRotationMatrix * deltaUV;
    
    vec2 sampleDirUV = deltaUV;
    float oldAngle   = minBias;
    
    for (int j = 0; j < HBAO_NUM_SAMPLE_STEPS; ++j) {
      vec2 sampleUV     = texcoord + (jitter + float(j)) * sampleDirUV;
      vec3 sampleVS     = texture(positionView, sampleUV).xyz;
      vec3 sampleDirVS  = (sampleVS - originVS);
      
      // angle between fragment tangent and the sample
      float gamma = (M_PI / 2.0) - acos(dot(normalVS, normalize(sampleDirVS)));
      
      if (gamma > oldAngle) {
        float value = sin(gamma) - sin(oldAngle);
        
#if HBAO_APPLY_ATTENUATION
        // distance between original and sample points
        float attenuation = clamp(1.0 - pow(length(sampleDirVS) / radiusWS, 2.0), 0.0, 1.0);
        occlusion += attenuation * value;
#else
        occlusion += value;
#endif
        oldAngle = gamma;
      }
    }
  }
  
  occlusion = 1.0 - occlusion / float(HBAO_NUM_SAMPLE_DIRECTIONS);
  occlusion = clamp(pow(occlusion, 1.0 + hbaoIntensity), 0.0, 1.0);
  // result = vec4(occlusion, occlusion, occlusion, 1.0);
  return occlusion;
}