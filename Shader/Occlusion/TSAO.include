#pragma once
 
#pragma optionNV (unroll all)

// TobSpr Ambient Occlusion
#pragma include "Includes/PositionReconstruction.include"
#pragma include "Includes/PoissonDisk.include"

uniform sampler2D viewSpaceNormals;
uniform sampler2D viewSpacePosition;

uniform sampler2D worldSpaceNormals;
uniform sampler2D worldSpacePosition;

uniform sampler2D depthTex;
 
uniform vec3 cameraPosition;

#define TSAO_PIXEL_RADIUS 10
#define TSAO_MAX_RADIUS_WS 2.0

float computeOcclusion(vec2 coord, ivec2 coordInt, float distanceToCamera) {

  vec3 originVS = textureLod(worldSpacePosition, coord, 0).xyz;
  vec2 coordStep = vec2(TSAO_PIXEL_RADIUS) / textureSize(viewSpacePosition, 0).xy;
  vec3 normalVS = textureLod(worldSpaceNormals, coord, 0).xyz;
  float pDepth = textureLod(depthTex, coord, 0).x;

  float aoSum = 0.0;

  for (int i = 0; i < 64; i++) {
    vec2 offs = poissonDisk64[i];
    vec2 sampleCoord = coord + offs * coordStep;
    if (any(greaterThan(sampleCoord, vec2(1.0))) || any(lessThan(sampleCoord, vec2(0.0)))) {
      continue;
    }
    vec3 sampleNormal = textureLod(worldSpaceNormals, sampleCoord, 0).xyz;
    vec3 samplePos = textureLod(worldSpacePosition, sampleCoord, 0).xyz;
    float sampleDepth = textureLod(depthTex, sampleCoord, 0).x;
    // aoSum += (1.0-saturate(dot(sampleNormal, normalVS)));
    float distanceF = step(distance(samplePos, originVS), TSAO_MAX_RADIUS_WS);
    float sampleF = saturate(1.0 / length(offs*4.0));
    aoSum += step(sampleDepth, pDepth) * (1.0-saturate(dot(sampleNormal, normalVS))) * distanceF * sampleF;


  }

  aoSum /= 64.0;
  // aoSum *= 2.0;
  // aoSum = clamp(aoSum, 0.23, 0.5);
  // aoSum *= 2.0;
  // aoSum = 1.0 - aoSum;
  // aoSum = saturate(aoSum);

  return aoSum;

}