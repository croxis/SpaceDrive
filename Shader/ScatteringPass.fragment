#version 400

#pragma include "Includes/Configuration.include"
#pragma include "Includes/PositionReconstruction.include"
#pragma include "Includes/ApplyScattering.include"

in vec2 texcoord;
out vec4 result;

uniform sampler3D inscatterSampler;
uniform ScatteringOptions scatteringOptions;

uniform sampler2D wsPositionTex;
uniform sampler2D basecolorTex;
uniform sampler2D cloudsTex;

uniform vec3 cameraPosition;

void main() {


    vec3 cameraPositionZ = cameraPosition;

    vec3 wsPosition = texture(wsPositionTex, texcoord).xyz;

    #if defined(CLOUDS_ENABLED)
        vec4 baseColor = texture(cloudsTex, texcoord);
    #else
        vec4 baseColor = texture(basecolorTex, texcoord);
    #endif
    vec3 wsPosModified = wsPosition;


    #if defined(DEBUG_DISABLE_SCATTERING)
        result = vec4(baseColor.xyz, 1);
        return;
    #endif

    #if defined(USE_SKYBOX_SCATTERING)
        // cameraPositionZ.z = wsPosModified.z;

        // wsPosition.z -= length(wsPosition.xy);
    #endif

    vec3 viewDir = normalize(wsPosModified - cameraPosition);
    vec3 attenuation = vec3(0);
    float irradianceFactor = 0.0;

    // There should be a more elegant way, but for now it works. I don't want to
    // waste a gbuffer flag for marking the skybox.r
    bool isSkybox = distance(wsPosModified, cameraPosition) > SKYBOX_BEGIN;
    
    #if defined(USE_SKYBOX_SCATTERING)
        // wsPosModified *= 1e5;

        // wsPosModified = vec3(0, 0, 1000000000000000000.0);
        // wsPosModified.z = cos(length(wsPosModified.xy) / 600000000.0) * -6000000000.0;
        // wsPosModified.z = 600000000.0;


    #else
    if (isSkybox) {
        // wsPosModified *= 1e20;
    }
    #endif

    vec3 scatteringResult = scatteringComputeInscatteredLight(
        scatteringOptions,
        wsPosModified, 
        cameraPositionZ,
        viewDir, 
        inscatterSampler,
        baseColor,
        isSkybox,
        attenuation, 
        irradianceFactor);


    #if 1

    scatteringResult *= 4.5;

    if (!isSkybox) {
        float fogFactor = saturate( (distance(cameraPosition, wsPosition) - 15.0) / 2000.0);
        // scatteringResult *= 0.2;
        fogFactor = smoothstep(0.0, 1.0, fogFactor);
        // fogFactor = 0.0;
        // fogFactor = 1.r0;
        // fogFactor = saturate(fogFactor);
        scatteringResult *= 2.0 * fogFactor;
        // scatteringResult *= 0.0;
        // scatteringResult = vec3(fogFactor);
    } else {
        scatteringResult *= 0.55;
        scatteringResult = pow(scatteringResult, vec3(1.1));
    }


    #if defined(DEBUG_VISUALIZATION_ACTIVE) && !defined(DEBUG_RM_SCATTERING)
        scatteringResult = vec3(0);
    #endif
    // scatteringResult = vec3(attenuation);

        // scatteringResult = pow(scatteringResult, vec3(1.0 / 2.2) ); 

    #endif
        

    result = vec4(scatteringResult, 1.0);
    // result = texture(sampler, texcoord);
}

