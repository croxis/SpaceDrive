#version 150


#pragma include "Includes/Configuration.include"
#pragma include "Includes/PositionReconstruction.include"

in vec2 texcoord;

uniform sampler2D positionTex;
uniform sampler2D depthTex;

uniform mat4 currentViewMat;

out vec3 outNormalVS;
out vec3 outPositionVS;


vec3 getPositionWorld(vec2 coord) {
    float z = texture(depthTex, coord).x;
    return calculateSurfacePos(z, coord);
}

uniform vec4 bufferSize;

void main() {
    // This computes the view space normals and position from the world-space
    // position buffer used to compute occlusion
    vec3 pixelW = vec3(bufferSize.xy, 0);
    vec3 world = getPositionWorld(texcoord);
    vec3 worldX1 = getPositionWorld(texcoord + pixelW.xz);
    vec3 worldY1 = getPositionWorld(texcoord + pixelW.zy);

    vec3 worldChangeX = world - worldX1;
    vec3 worldChangeY = world - worldY1;

    vec4 positionVS = currentViewMat * vec4(world, 1);
    vec3 normal = normalize(cross(worldChangeX, worldChangeY));

    vec4 vsNormal = normalize(currentViewMat * vec4(normal, 0));

    outNormalVS = vsNormal.xyz;
    outPositionVS = positionVS.rgb;
}