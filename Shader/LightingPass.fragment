#version 400


// Required, or it runs incredible slow
#pragma optionNV (unroll all)

#extension GL_ARB_shader_image_load_store : enable

#pragma include "Includes/Configuration.include"
#pragma include "Includes/PositionReconstruction.include"
#pragma include "Includes/Material.include"
#pragma include "Includes/Ambient.include"


// Deferred target inpupts
uniform sampler2D data0;
uniform sampler2D data1;
uniform sampler2D data2;
uniform sampler2D data3;
uniform sampler2D depth;

uniform sampler2D shadowedLightsTex;
uniform sampler2D unshadowedLightsTex;

// Global illumination inputs
#ifdef USE_GLOBAL_ILLUMINATION
uniform sampler2D giDiffuseTex;
uniform sampler2D giReflectionTex;
#endif

// Combined occlusion and gi from the edge preserving blur

#ifdef USE_OCCLUSION
uniform sampler2D occlusionTex;
#endif

// Various data
uniform int frameIndex;
uniform sampler2D noiseTexture;
uniform vec4 bufferSize;
uniform vec3 cameraPosition;

uniform sampler2D volumetricLightingTex;

in vec2 texcoord;


// Outputs
layout(location = 0) out vec4 lightingResult;
#ifdef USE_SSLR
layout(location = 1) out vec4 sslrDataResult;
#endif


// uniform sampler2D lastFramePosition;

// #ifdef USE_OCCLUSION
// uniform sampler2D lastFrameOcclusion;
// #endif



uniform sampler2D scatteringTex;

// Dynamic exposure
#ifdef USE_DYNAMIC_EXPOSURE
uniform sampler2D dynamicExposureTex;
#endif


vec3 getPositionWorld(vec2 coord) {
    float z = texture(depth, coord).x;
    return calculateSurfacePos(z, coord);
}


void main() {


    // Compute texcoords
    ivec2 screenSize = textureSize(data0, 0);
    ivec2 screenCoord = ivec2(gl_FragCoord.xy);
 
    // Lighting result gets stored in this variables
    vec3 result = vec3(0);
    vec3 giDiffuseColor = vec3(0.2);
    vec4 giSpecularColor = vec4(0);
    vec3 ambient = vec3(0);

    // Compute normal from depth buffer
    vec3 pixelW = vec3(bufferSize.xy, 0);
    vec3 world = getPositionWorld(texcoord);
    vec3 worldX1 = getPositionWorld(texcoord + pixelW.xz);
    vec3 worldY1 = getPositionWorld(texcoord + pixelW.zy);
    vec3 wsNormal = (cross(world - worldX1, world - worldY1));
    wsNormal = normalize(wsNormal);

    // Extract material data
    vec4 target0data = texelFetch(data0, screenCoord, 0);
    vec4 target1data = texelFetch(data1, screenCoord, 0);
    vec4 target2data = texelFetch(data2, screenCoord, 0);
    vec4 target3data = texelFetch(data3, screenCoord, 0);
    Material material = unpackMaterial(target0data, target1data, target2data, target3data);


    float pixelDepth = texelFetch(depth, screenCoord,0 ).x;
    float reflectionFactor = saturate( (0.5 - material.roughness) * 5.0 ) ;



    #ifdef USE_GLOBAL_ILLUMINATION
    #if 0
    #ifndef DEBUG_DISABLE_GI

    // Bilateral upsample global illumination

    ivec2 giSampleCoord = screenCoord / 2;


    
    const int giSampleCount = 5;

    vec2 giSampleOffsets[giSampleCount] = vec2[](
        vec2(0,0), vec2(-1,0), vec2(1,0), vec2(0,-1), vec2(0,1)
    );

    vec4 giSpecularResult = vec4(0);
    vec4 giDiffuseResult = vec4(0);
    float giValidSamples = 0.01;
    float pixelLZ = getLinearZFromZ(pixelDepth);

    for (int i = 0; i < giSampleCount; i++) {

        vec2 coord = texcoord + giSampleOffsets[i] / vec2(screenSize) * 0.5;
        vec3 normalScreen = normalize(textureLod(data1, coord, 0).xyz);
        float depthScreen = textureLod(depth, coord, 0).x;
        float reliability = saturate((dot(normalScreen, material.normal)-0.9));

        float lz1 = getLinearZFromZ(depthScreen);

        reliability *= 1.0 - saturate(abs(lz1 - pixelLZ) * 50.0);
        giSpecularResult += texture(giReflectionTex, coord) * reliability;
        giDiffuseResult += texture(giDiffuseTex, coord) * reliability;
        giValidSamples += reliability;

    }
    giSpecularColor = giSpecularResult / giValidSamples;
    giDiffuseColor = giDiffuseResult / giValidSamples;
    #endif
    #endif
    #endif


    // There should be a more elegant way, but for now it works. I don't want to
    // waste a gbuffer flag for marking the skybox.
    bool isSkybox = distance(material.position, cameraPosition) > SKYBOX_BEGIN;
    
    float mixedOcclusionFactor = 1.0;
    vec3 viewVector = normalize(cameraPosition - material.position);

    // Scattering
    #ifdef USE_SCATTERING
    vec3 scatteringResult = texture(scatteringTex, texcoord).xyz;
    result += scatteringResult;
    #endif

    // We can skip lighting for the skybox
    if (isSkybox && false) {

        // result += 3.0 * material.baseColor;


    } else {

        #if USE_OCCLUSION || USE_GLOBAL_ILLUMINATION
            mixedOcclusionFactor = texture(occlusionTex, texcoord).w;
        #endif

        // mixedOcclusionFactor = 0.5;

        // // upscale occlusion here
        // #if USE_OCCLUSION

        //     // Temporal occlusion
        //     vec2 velocity = target2data.xy / 255.0;
        //     vec2 lastFrameTexcoord = texcoord  + velocity;
        //     ivec2 lastFrameCoordInt = ivec2(lastFrameTexcoord * textureSize(lastFramePosition, 0).xy);

        //     vec3 lastPos = texelFetch(lastFramePosition, lastFrameCoordInt, 0).xyz;
        //     float reliability = 1.0 - saturate(distance(lastPos, material.position) * 10.0);
        //     mixedOcclusionFactor = texture(occlusionTex, texcoord).x;

        //     float lastOcclusion = texelFetch(lastFrameOcclusion, lastFrameCoordInt, 0).x;
        //     mixedOcclusionFactor = mix(mixedOcclusionFactor, lastOcclusion, 0.5 * saturate(reliability) );

        // #endif

        // #ifdef DEBUG_DISABLE_OCCLUSION
        //     mixedOcclusionFactor = 0.0;
        // #endif

        // Metallic materials don't have much occlusion
        // occlusionResult = mix(occlusionResult, vec4(0.0), saturate(material.metallic-0.3) );
       

        result += texture(shadowedLightsTex, texcoord).xyz;
        result += texture(unshadowedLightsTex, texcoord).xyz;


        // Ambient / Reflections
        ambient = computeAmbient(material, giDiffuseColor, giSpecularColor, 
            mixedOcclusionFactor, viewVector, wsNormal);    
        result += ambient;

    }

    // result *= texture(volumetricLightingTex, texcoord).x;

    #ifdef USE_SSLR
        // SSLR Precomputation data
        vec3 reflectionVector = normalize(reflect(viewVector, material.normal));
        sslrDataResult = vec4(reflectionVector, reflectionFactor);
    #endif

    // SRGB
    result = pow(result, vec3(1.0 / 2.2) ); 
    float exposure = 1.0;

    #ifdef USE_DYNAMIC_EXPOSURE
        // Dynamic Exposure
        exposure = texelFetch(dynamicExposureTex, ivec2(0), 0).x;
    #endif

    // exposure = 0.5;

    #ifndef DEBUG_VISUALIZATION_ACTIVE
        result = 1.0 - exp(-exposure * result);
    #endif


    lightingResult = vec4(result, 0.0 );
}
